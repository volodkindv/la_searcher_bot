# ToDo later: user_callback["action"] == "search_follow_mode" –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "sfmw", "sfmb"

"""receives telegram messages from users, acts accordingly and sends back the reply"""

import asyncio
import datetime
import hashlib
import json
import logging
import math
import re
import urllib.parse
import urllib.request
from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Tuple, Union

import requests
from flask import Request
from psycopg2.extensions import cursor
from requests.models import Response
from telegram import (
    Bot,
    CallbackQuery,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    TelegramObject,
    Update,
)
from telegram.ext import Application, ContextTypes

from _dependencies.commons import (
    Topics,
    get_app_config,
    publish_to_pubsub,
    setup_google_logging,
    sql_connect_by_psycopg2,
)
from _dependencies.misc import (
    age_writer,
    notify_admin,
    process_sending_message_async,
    time_counter_since_search_start,
)

setup_google_logging()

# To get rid of telegram "Retrying" Warning logs, which are shown in GCP Log Explorer as Errors.
# Important ‚Äì these are not errors, but jest informational warnings that there were retries, that's why we exclude them
logging.getLogger('telegram.vendor.ptb_urllib3.urllib3').setLevel(logging.ERROR)
logger = logging.getLogger(__name__)


standard_modifier = {'on': '‚úÖ ', 'off': '‚òê '}
full_buttons_dict = {
    'topic_types': {
        'regular': {'text': '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 0},
        'resonance': {'text': '—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 5, 'hide': False},
        'info_support': {'text': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'id': 4, 'hide': False},
        'reverse': {'text': '–æ–±—Ä–∞—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 1},
        'training': {'text': '—É—á–µ–±–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 3},
        'patrol': {'text': '–Ω–æ—á–Ω–æ–π –ø–∞—Ç—Ä—É–ª—å', 'id': 2, 'hide': False},
        'event': {'text': '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'id': 10},
        'info': {'text': '–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'id': 20, 'hide': True},
        'about': {'text': 'üí° —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–æ–∏—Å–∫–æ–≤ üí°', 'id': None},
    },
    'roles': {
        'member': {'text': '—è —Å–æ—Å—Ç–æ—é –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç', 'id': 'member'},
        'new_member': {'text': '—è —Ö–æ—á—É –ø–æ–º–æ–≥–∞—Ç—å –õ–∏–∑–∞–ê–ª–µ—Ä—Ç', 'id': 'new_member'},
        'relative': {'text': '—è –∏—â—É —á–µ–ª–æ–≤–µ–∫–∞', 'id': 'relative'},
        'other': {'text': '—É –º–µ–Ω—è –¥—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞', 'id': 'other'},
        'no_answer': {'text': '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å', 'id': 'no_answer'},
        'about': {'text': 'üí° —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–æ–ª—è–º üí°', 'id': None},
    },
    'set': {'topic_type': {'text': '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥ –ø–æ–∏—Å–∫–æ–≤', 'id': 'topic_type'}},
    'core': {'to_start': {'text': '–≤ –Ω–∞—á–∞–ª–æ', 'id': 'to_start'}},
}


@dataclass
class SearchSummary:
    topic_type: Any = None
    topic_id: Any = None
    parsed_time: Any = None
    status: Any = None
    title: Any = None
    link: Any = None
    start_time: Any = None
    num_of_replies: Any = None
    name: Any = None
    display_name: Any = None
    age: Any = None
    searches_table_id: Any = None
    folder_id: Any = None
    age_max: Any = None
    age_min: Any = None
    num_of_persons: Any = None
    city_locations: Any = None  # city / town / place ‚Äì approximate coordinates
    hq_locations: Any = None  # shtab ‚Äìexact coordinates
    new_status: Any = None
    full_dict: Any = None

    def __str__(self):
        return (
            f'{self.parsed_time} ‚Äì {self.folder_id} / {self.topic_id} : {self.name} - {self.age} ‚Äì '
            f'{self.num_of_replies}. NEW: {self.display_name} ‚Äì {self.age_min} ‚Äì {self.age_max} ‚Äì '
            f'{self.num_of_persons}'
        )


class Button:
    """Contains one unique button and all the associated attributes"""

    def __init__(self, data: Dict[str, Any] = None, modifier=None):
        if modifier is None:
            modifier = {'on': '‚úÖ ', 'off': '‚òê '}  # standard modifier

        self.modifier = modifier
        self.data = data
        self.text = None
        for key, value in self.data.items():
            setattr(self, key, value)
        self.hash = hashlib.shake_128(self.text.encode('utf-8')).hexdigest(4)  # noqa

        self.any_text = [self.text]
        for key, value in modifier.items():
            new_value = f'{value}{self.text}'
            setattr(self, key, new_value)
            self.any_text.append(new_value)

        self.all = [v for k, v in self.__dict__.items() if v != modifier]

    def __str__(self):
        return self.text

    def temp_all_keys(self):
        return [k for k, v in self.__dict__.items()]


class GroupOfButtons:
    """Contains the set of unique buttons of the similar nature (to be shown together as alternatives)"""

    def __init__(
        self,
        button_dict,
        modifier_dict=None,
    ):
        self.modifier_dict = modifier_dict

        all_button_texts = []
        all_button_hashes = []
        for key, value in button_dict.items():
            setattr(self, key, Button(value, modifier_dict))
            all_button_texts += self.__getattribute__(key).any_text
            all_button_hashes.append(self.__getattribute__(key).hash)
        self.any_text = all_button_texts
        self.any_hash = all_button_hashes

    def __str__(self):
        return self.any_text

    def contains(self, check: str) -> bool:
        """Check is the given text/hash is used for any button in this group"""

        if check in self.any_text:
            return True

        if check in self.any_hash:
            return True

        return False

    def temp_all_keys(self):
        return [k for k, v in self.__dict__.items()]

    def id(self, given_id):
        """Return a Button which correspond to the given id"""
        for key, value in self.__dict__.items():
            if not value:
                continue
            if hasattr(value, 'id') and value.id == given_id:
                return value
        return None

    def keyboard(self, act_list, change_list):
        """Generate a list of telegram buttons (2D array) basing on existing setting list and one that should change"""

        keyboard = []
        for key, value in self.__dict__.items():
            curr_button = self.__getattribute__(key)
            if key in {'modifier_dict', 'any_text', 'any_hash'}:
                continue
            if hasattr(value, 'hide') and value.hide:
                continue
            curr_button_is_in_existing_id_list = False
            curr_button_is_asked_to_change = False
            for id_item in act_list:
                if curr_button.id == id_item:
                    curr_button_is_in_existing_id_list = True
                    break
            for id_item in change_list:
                if curr_button.id == id_item:
                    curr_button_is_asked_to_change = True
                    break

            if curr_button_is_in_existing_id_list and key not in {'about'}:
                if not curr_button_is_asked_to_change:
                    keyboard += [
                        {'text': curr_button.on, 'callback_data': f'{{"action":"off","hash": "{curr_button.hash}"}}'}
                    ]
                else:
                    keyboard += [
                        {'text': curr_button.off, 'callback_data': f'{{"action":"on","hash": "{curr_button.hash}"}}'}
                    ]
            elif key not in {'about'}:
                if not curr_button_is_asked_to_change:
                    keyboard += [
                        {'text': curr_button.off, 'callback_data': f'{{"action":"on","hash": "{curr_button.hash}"}}'}
                    ]
                else:
                    keyboard += [
                        {'text': curr_button.on, 'callback_data': f'{{"action":"off","hash": "{curr_button.hash}"}}'}
                    ]
            else:  # case for 'about' button
                keyboard += [
                    {'text': curr_button.text, 'callback_data': f'{{"action":"about","hash": "{curr_button.hash}"}}'}
                ]

        keyboard = [[k] for k in keyboard]

        return keyboard

    def button_by_text(self, given_text):
        """Return a Button which correspond to the given text"""
        for key, value in self.__dict__.items():
            if not value:
                continue
            if hasattr(value, 'any_text') and given_text in value.any_text:
                return value
        return None

    def button_by_hash(self, given_hash):
        """Return a Button which correspond to the given hash"""
        for key, value in self.__dict__.items():
            if not value:
                continue
            if hasattr(value, 'hash') and given_hash == value.hash:
                return value
        return None


class AllButtons:
    def __init__(self, initial_dict):
        for key, value in initial_dict.items():
            setattr(self, key, GroupOfButtons(value))

    def temp_all_keys(self):
        return [k for k, v in self.__dict__.items()]


def compose_user_preferences_message(cur: cursor, user_id: int) -> List[Union[List[str], str]]:
    """Compose a text for user on which types of notifications are enabled for zir"""

    cur.execute("""SELECT preference FROM user_preferences WHERE user_id=%s ORDER BY preference;""", (user_id,))
    user_prefs = cur.fetchall()

    prefs_wording = ''
    prefs_list = []
    if user_prefs and len(user_prefs) > 0:
        for user_pref_line in user_prefs:
            prefs_list.append(user_pref_line[0])
            if user_pref_line[0] == 'all':
                prefs_wording += '–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
            elif user_pref_line[0] == 'new_searches':
                prefs_wording += ' &#8226; –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö\n'
            elif user_pref_line[0] == 'status_changes':
                prefs_wording += ' &#8226; –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞\n'
            elif user_pref_line[0] == 'title_changes':
                prefs_wording += ' &#8226; –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞\n'
            elif user_pref_line[0] == 'comments_changes':
                prefs_wording += ' &#8226; –æ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö\n'
            elif user_pref_line[0] == 'inforg_comments':
                prefs_wording += ' &#8226; –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞\n'
            elif user_pref_line[0] == 'first_post_changes':
                prefs_wording += ' &#8226; –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ\n'
            elif user_pref_line[0] == 'bot_news':
                pass
            else:
                prefs_wording += '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'
    else:
        prefs_wording += '–ø–æ–∫–∞ –Ω–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'

    prefs_wording_and_list = [prefs_wording, prefs_list]

    return prefs_wording_and_list


def compose_msg_on_all_last_searches(cur: cursor, region: int) -> str:
    """Compose a part of message on the list of recent searches"""

    pre_url = 'https://lizaalert.org/forum/viewtopic.php?t='
    text = ''

    # download the list from SEARCHES sql table
    cur.execute(
        """SELECT s2.* FROM 
            (SELECT search_forum_num, search_start_time, display_name, status, status, family_name, age 
            FROM searches 
            WHERE forum_folder_id=%s 
            ORDER BY search_start_time DESC 
            LIMIT 20) s2 
        LEFT JOIN search_health_check shc 
        ON s2.search_forum_num=shc.search_forum_num 
        WHERE (shc.status is NULL or shc.status='ok' or shc.status='regular') 
        ORDER BY s2.search_start_time DESC;""",
        (region,),
    )

    database = cur.fetchall()

    for line in database:
        search = SearchSummary()
        (
            search.topic_id,
            search.start_time,
            search.display_name,
            search.new_status,
            search.status,
            search.name,
            search.age,
        ) = list(line)

        if not search.display_name:
            age_string = f' {age_writer(search.age)}' if search.age and search.age != 0 else ''
            search.display_name = f'{search.name}{age_string}'

        if not search.new_status:
            search.new_status = search.status

        if search.new_status in {'–ò—â–µ–º', '–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω'}:
            search.new_status = f'–ò—â–µ–º {time_counter_since_search_start(search.start_time)[0]}'

        text += f'{search.new_status} <a href="{pre_url}{search.topic_id}">{search.display_name}</a>\n'

    return text


def search_button_row_ikb(search_following_mode, search_status, search_id, search_display_name, url):
    search_following_mark = search_following_mode if search_following_mode else '  '
    ikb_row = [
        [
            {
                'text': f'{search_following_mark} {search_status}',
                'callback_data': f'{{"action":"search_follow_mode", "hash":"{search_id}"}}',
            },  ##left button to on/off follow
            {'text': search_display_name, 'url': url},  ##right button - link to the search on the forum
        ]
    ]
    return ikb_row


def compose_msg_on_all_last_searches_ikb(cur: cursor, region: int, user_id: int) -> List:
    """Compose a part of message on the list of recent searches"""
    # issue#425 it is ikb variant of the above function, returns data formated for inline keyboard
    # 1st element of returned list is general info and should be popped
    # rest elements are searches to be showed as inline buttons

    pre_url = 'https://lizaalert.org/forum/viewtopic.php?t='
    ikb = []

    # download the list from SEARCHES sql table
    cur.execute(
        """SELECT s2.*, upswl.search_following_mode FROM 
            (SELECT search_forum_num, search_start_time, display_name, status, status, family_name, age 
            FROM searches 
            WHERE forum_folder_id=%(region)s 
            ORDER BY search_start_time DESC 
            LIMIT 20) s2 
        LEFT JOIN search_health_check shc ON s2.search_forum_num=shc.search_forum_num
        LEFT JOIN user_pref_search_whitelist upswl ON upswl.search_id=s2.search_forum_num and upswl.user_id=%(user_id)s
        WHERE (shc.status is NULL or shc.status='ok' or shc.status='regular') 
        ORDER BY s2.search_start_time DESC;""",
        {'region': region, 'user_id': user_id},
    )

    database = cur.fetchall()

    for line in database:
        search = SearchSummary()
        (
            search.topic_id,
            search.start_time,
            search.display_name,
            search.new_status,
            search.status,
            search.name,
            search.age,
            search_following_mode,
        ) = list(line)

        if not search.display_name:
            age_string = f' {age_writer(search.age)}' if search.age and search.age != 0 else ''
            search.display_name = f'{search.name}{age_string}'

        if not search.new_status:
            search.new_status = search.status

        if search.new_status in {'–ò—â–µ–º', '–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω'}:
            search.new_status = f'–ò—â–µ–º {time_counter_since_search_start(search.start_time)[0]}'

        ikb += search_button_row_ikb(
            search_following_mode,
            search.new_status,
            search.topic_id,
            search.display_name,
            f'{pre_url}{search.topic_id}',
        )
    return ikb


def compose_msg_on_active_searches_in_one_reg(cur: cursor, region: int, user_data) -> str:
    """Compose a part of message on the list of active searches in the given region with relation to user's coords"""

    pre_url = 'https://lizaalert.org/forum/viewtopic.php?t='
    text = ''

    cur.execute(
        """SELECT s2.* FROM 
            (SELECT s.search_forum_num, s.search_start_time, s.display_name, sa.latitude, sa.longitude, 
            s.topic_type, s.family_name, s.age 
            FROM searches s 
            LEFT JOIN search_coordinates sa ON s.search_forum_num = sa.search_id 
            WHERE (s.status='–ò—â–µ–º' OR s.status='–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω') 
                AND s.forum_folder_id=%s ORDER BY s.search_start_time DESC) s2 
        LEFT JOIN search_health_check shc ON s2.search_forum_num=shc.search_forum_num
        WHERE (shc.status is NULL or shc.status='ok' or shc.status='regular') 
        ORDER BY s2.search_start_time DESC;""",
        (region,),
    )
    searches_list = cur.fetchall()

    user_lat = None
    user_lon = None

    if user_data:
        user_lat = user_data[0]
        user_lon = user_data[1]

    for line in searches_list:
        search = SearchSummary()
        (
            search.topic_id,
            search.start_time,
            search.display_name,
            search_lat,
            search_lon,
            search.topic_type,
            search.name,
            search.age,
        ) = list(line)

        if time_counter_since_search_start(search.start_time)[1] >= 60:
            continue

        time_since_start = time_counter_since_search_start(search.start_time)[0]

        if user_lat and search_lat:
            dist = distance_to_search(search_lat, search_lon, user_lat, user_lon)
            dist_and_dir = f' {dist[1]} {dist[0]} –∫–º'
        else:
            dist_and_dir = ''

        if not search.display_name:
            age_string = f' {age_writer(search.age)}' if search.age != 0 else ''
            search.display_name = f'{search.name}{age_string}'

        text += f'{time_since_start}{dist_and_dir} <a href="{pre_url}{search.topic_id}">{search.display_name}</a>\n'

    return text


def compose_msg_on_active_searches_in_one_reg_ikb(
    cur: cursor, region: int, user_data: Tuple[str, str], user_id: int
) -> List:
    """Compose a part of message on the list of active searches in the given region with relation to user's coords"""
    # issue#425 it is ikb variant of the above function, returns data formated for inline keyboard
    # 1st element of returned list is general info and should be popped
    # rest elements are searches to be showed as inline buttons

    pre_url = 'https://lizaalert.org/forum/viewtopic.php?t='
    ikb = []

    cur.execute(
        """SELECT s2.*, upswl.search_following_mode FROM 
            (SELECT s.search_forum_num, s.search_start_time, s.display_name, sa.latitude, sa.longitude, 
            s.topic_type, s.family_name, s.age 
            FROM searches s 
            LEFT JOIN search_coordinates sa ON s.search_forum_num = sa.search_id 
            WHERE (s.status='–ò—â–µ–º' OR s.status='–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω') 
                AND s.forum_folder_id=%(region)s ORDER BY s.search_start_time DESC) s2 
        LEFT JOIN search_health_check shc ON s2.search_forum_num=shc.search_forum_num
        LEFT JOIN user_pref_search_whitelist upswl ON upswl.search_id=s2.search_forum_num and upswl.user_id=%(user_id)s
        WHERE (shc.status is NULL or shc.status='ok' or shc.status='regular') 
        ORDER BY s2.search_start_time DESC;""",
        {'region': region, 'user_id': user_id},
    )
    searches_list = cur.fetchall()

    user_lat = None
    user_lon = None

    if user_data:
        user_lat = user_data[0]
        user_lon = user_data[1]

    for line in searches_list:
        search = SearchSummary()
        (
            search.topic_id,
            search.start_time,
            search.display_name,
            search_lat,
            search_lon,
            search.topic_type,
            search.name,
            search.age,
            search_following_mode,
        ) = list(line)

        if time_counter_since_search_start(search.start_time)[1] >= 60:
            continue

        time_since_start = time_counter_since_search_start(search.start_time)[0]

        if user_lat and search_lat:
            dist = distance_to_search(search_lat, search_lon, user_lat, user_lon, False)
            dist_and_dir = f' {dist[1]} {dist[0]} –∫–º'
        else:
            dist_and_dir = ''

        if not search.display_name:
            age_string = f' {age_writer(search.age)}' if search.age != 0 else ''
            search.display_name = f'{search.name}{age_string}'

        ikb += search_button_row_ikb(
            search_following_mode,
            f'{time_since_start}{dist_and_dir}',
            search.topic_id,
            search.display_name,
            f'{pre_url}{search.topic_id}',
        )
    return ikb


def compose_full_message_on_list_of_searches(
    cur: cursor, list_type: str, user_id: int, region: int, region_name: str
) -> str:
    """Compose a Final message on the list of searches in the given region"""

    msg = ''

    cur.execute('SELECT latitude, longitude FROM user_coordinates WHERE user_id=%s LIMIT 1;', (user_id,))

    user_data = cur.fetchone()

    # combine the list of last 20 searches
    if list_type == 'all':
        msg += compose_msg_on_all_last_searches(cur, region)

        if msg:
            msg = (
                '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–∏—Å–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ <a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>:\n'
                + msg
            )

        else:
            msg = (
                '–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '
                '<a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–∏—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É '
                '–≤ <a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ß–∞—Ç–µ '
                '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º</a>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.'
            )

    # Combine the list of the latest active searches
    else:
        msg += compose_msg_on_active_searches_in_one_reg(cur, region, user_data)

        if msg:
            msg = (
                '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –∑–∞ 60 –¥–Ω–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ <a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>:\n'
                + msg
            )

        else:
            msg = (
                '–í —Ä–∞–∑–¥–µ–ª–µ <a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a> –≤—Å–µ –ø–æ–∏—Å–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã.'
            )

    return msg


def compose_full_message_on_list_of_searches_ikb(
    cur: cursor, list_type: str, user_id: int, region: int, region_name: str
):  # issue#425
    """Compose a Final message on the list of searches in the given region"""
    # issue#425 This variant of the above function returns data in format used to compose inline keyboard
    # 1st element is caption
    # rest elements are searches in format to be showed as inline buttons

    ikb = []

    cur.execute('SELECT latitude, longitude FROM user_coordinates WHERE user_id=%s LIMIT 1;', (user_id,))

    user_data = cur.fetchone()

    url = f'https://lizaalert.org/forum/viewforum.php?f={region}'
    # combine the list of last 20 searches
    if list_type == 'all':
        ikb += compose_msg_on_all_last_searches_ikb(cur, region, user_id)
        logging.info('ikb += compose_msg_on_all_last_searches_ikb == ' + str(ikb))

        if len(ikb) > 0:
            msg = f'–ü–æ—Å–ª. 20 –ø–æ–∏—Å–∫–æ–≤ –≤ {region_name}'
            ikb.insert(0, [{'text': msg, 'url': url}])
        else:
            msg = (
                '–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '
                '<a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–∏—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É '
                '–≤ <a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ß–∞—Ç–µ '
                '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º</a>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.'
            )
            ikb = [[{'text': msg, 'url': url}]]

    # Combine the list of the latest active searches
    else:
        ikb += compose_msg_on_active_searches_in_one_reg_ikb(cur, region, user_data, user_id)
        logging.info(f'ikb += compose_msg_on_active_searches_in_one_reg_ikb == {ikb}; ({region=})')

        if len(ikb) > 0:
            msg = f'–ê–∫—Ç. –ø–æ–∏—Å–∫–∏ –∑–∞ 60 –¥–Ω–µ–π –≤ {region_name}'
            ikb.insert(0, [{'text': msg, 'url': url}])
        else:
            msg = f'–ù–µ—Ç –∞–∫—Ç. –ø–æ–∏—Å–∫–æ–≤ –∑–∞ 60 –¥–Ω–µ–π –≤ {region_name}'
            ikb = [[{'text': msg, 'url': url}]]

    return ikb


def check_if_new_user(cur: cursor, user_id: int) -> bool:
    """check if the user is new or not"""

    cur.execute("""SELECT user_id FROM users WHERE user_id=%s LIMIT 1;""", (user_id,))

    info_on_user_from_users = str(cur.fetchone())

    if info_on_user_from_users == 'None':
        user_is_new = True
    else:
        user_is_new = False

    return user_is_new


def check_if_user_has_no_regions(cur, user_id):
    """check if the user has at least one region"""

    cur.execute("""SELECT user_id FROM user_regional_preferences WHERE user_id=%s LIMIT 1;""", (user_id,))

    info_on_user_from_users = str(cur.fetchone())

    if info_on_user_from_users == 'None':
        no_regions = True
    else:
        no_regions = False

    return no_regions


def save_user_pref_role(cur, user_id, role_desc):
    """save user role"""

    role_dict = {
        '—è —Å–æ—Å—Ç–æ—é –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç': 'member',
        '—è —Ö–æ—á—É –ø–æ–º–æ–≥–∞—Ç—å –õ–∏–∑–∞–ê–ª–µ—Ä—Ç': 'new_member',
        '—è –∏—â—É —á–µ–ª–æ–≤–µ–∫–∞': 'relative',
        '—É –º–µ–Ω—è –¥—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞': 'other',
        '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å': 'no_answer',
    }

    try:
        role = role_dict[role_desc]
    except:  # noqa
        role = 'unidentified'

    cur.execute("""UPDATE users SET role=%s where user_id=%s;""", (role, user_id))

    logging.info(f'[comm]: user {user_id} selected role {role}')

    return role


def save_user_pref_urgency(
    cur, user_id, urgency_value, b_pref_urgency_highest, b_pref_urgency_high, b_pref_urgency_medium, b_pref_urgency_low
):
    """save user urgency"""

    urgency_dict = {
        b_pref_urgency_highest: {'pref_id': 0, 'pref_name': 'highest'},
        b_pref_urgency_high: {'pref_id': 1, 'pref_name': 'high'},
        b_pref_urgency_medium: {'pref_id': 2, 'pref_name': 'medium'},
        b_pref_urgency_low: {'pref_id': 3, 'pref_name': 'low'},
    }

    try:
        pref_id = urgency_dict[urgency_value]['pref_id']
        pref_name = urgency_dict[urgency_value]['pref_name']
    except:  # noqa
        pref_id = 99
        pref_name = 'unidentified'

    cur.execute("""DELETE FROM user_pref_urgency WHERE user_id=%s;""", (user_id,))
    cur.execute(
        """INSERT INTO user_pref_urgency (user_id, pref_id, pref_name, timestamp) VALUES (%s, %s, %s, %s);""",
        (user_id, pref_id, pref_name, datetime.datetime.now()),
    )

    logging.info(f'urgency set as {pref_name} for user_id {user_id}')

    return None


def save_user_coordinates(cur: cursor, user_id: int, input_latitude: float, input_longitude: float) -> None:
    """Save / update user "home" coordinates"""

    cur.execute('DELETE FROM user_coordinates WHERE user_id=%s;', (user_id,))

    now = datetime.datetime.now()
    cur.execute(
        """INSERT INTO user_coordinates (user_id, latitude, longitude, upd_time) values (%s, %s, %s, %s);""",
        (user_id, input_latitude, input_longitude, now),
    )

    return None


def show_user_coordinates(cur: cursor, user_id: int) -> Tuple[str, str]:
    """Return the saved user "home" coordinates"""

    cur.execute("""SELECT latitude, longitude FROM user_coordinates WHERE user_id=%s LIMIT 1;""", (user_id,))

    try:
        lat, lon = list(cur.fetchone())
    except:  # noqa
        lat = None
        lon = None

    return lat, lon


def delete_user_coordinates(cur: cursor, user_id: int) -> None:
    """Delete the saved user "home" coordinates"""

    cur.execute('DELETE FROM user_coordinates WHERE user_id=%s;', (user_id,))

    return None


def distance_to_search(search_lat, search_lon, user_let, user_lon, coded_style=True):
    """Return the distance and direction from user "home" coordinates to the search coordinates"""

    r = 6373.0  # radius of the Earth

    # coordinates in radians
    lat1 = math.radians(float(search_lat))
    lon1 = math.radians(float(search_lon))
    lat2 = math.radians(float(user_let))
    lon2 = math.radians(float(user_lon))

    # change in coordinates
    d_lon = lon2 - lon1

    d_lat = lat2 - lat1

    # Haversine formula
    a = math.sin(d_lat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(d_lon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = r * c
    dist = round(distance)

    # define direction

    def calc_bearing(lat_2, lon_2, lat_1, lon_1):
        d_lon_ = lon_2 - lon_1
        x = math.cos(math.radians(lat_2)) * math.sin(math.radians(d_lon_))
        y = math.cos(math.radians(lat_1)) * math.sin(math.radians(lat_2)) - math.sin(math.radians(lat_1)) * math.cos(
            math.radians(lat_2)
        ) * math.cos(math.radians(d_lon_))
        bearing = math.atan2(x, y)
        bearing = math.degrees(bearing)

        return bearing

    def calc_nsew(lat_1, lon_1, lat_2, lon_2, coded_style=True):
        # indicators of the direction, like ‚ÜñÔ∏é
        if coded_style:
            points = [
                '&#8593;&#xFE0E;',
                '&#8599;&#xFE0F;',
                '&#8594;&#xFE0E;',
                '&#8600;&#xFE0E;',
                '&#8595;&#xFE0E;',
                '&#8601;&#xFE0E;',
                '&#8592;&#xFE0E;',
                '&#8598;&#xFE0E;',
            ]
        else:
            points = ['‚¨ÜÔ∏è', '‚ÜóÔ∏è', '‚û°Ô∏è', '‚ÜòÔ∏è', '‚¨áÔ∏è', '‚ÜôÔ∏è', '‚¨ÖÔ∏è', '‚ÜñÔ∏è']

        bearing = calc_bearing(lat_1, lon_1, lat_2, lon_2)
        bearing += 22.5
        bearing = bearing % 360
        bearing = int(bearing / 45)  # values 0 to 7
        nsew = points[bearing]

        return nsew

    direction = calc_nsew(lat1, lon1, lat2, lon2, coded_style)

    return [dist, direction]


def get_user_reg_folders_preferences(cur: cursor, user_id: int) -> List[int]:
    """Return user's regional preferences"""

    user_prefs_list = []

    try:
        cur.execute('SELECT forum_folder_num FROM user_regional_preferences WHERE user_id=%s;', (user_id,))
        user_reg_prefs_array = cur.fetchall()

        for line in user_reg_prefs_array:
            user_prefs_list.append(line[0])

        logging.info(str(user_prefs_list))

    except Exception as e:
        logging.info(f'failed to get user regional prefs for user {user_id}')
        logging.exception(e)

    return user_prefs_list


def get_user_role(cur: cursor, user_id: int):
    """Return user's role"""

    user_role = None

    try:
        cur.execute('SELECT role FROM users WHERE user_id=%s LIMIT 1;', (user_id,))
        user_role = cur.fetchone()
        if user_role:
            user_role = user_role[0]

        logging.info(f'user {user_id} role is {user_role}')

    except Exception as e:
        logging.info(f'failed to get user role for user {user_id}')
        logging.exception(e)

    return user_role


# issue#425
def get_user_sys_roles(cur, user_id):
    """Return user's roles in system"""

    user_roles = ['']

    try:
        cur.execute('SELECT role FROM user_roles WHERE user_id=%s;', (user_id,))
        lines = cur.fetchall()
        for line in lines:
            user_roles.append(line[0])
        logging.info(f'user {user_id} role has roles {user_roles=}')
    except Exception as e:
        logging.info(f'failed to get from user_roles for user {user_id}')
        logging.exception(e)

    return user_roles


def add_user_sys_role(cur, user_id, sys_role_name):
    """Saves user's role in system"""

    try:
        cur.execute(
            """INSERT INTO user_roles (user_id, role) 
                    VALUES (%s, %s) ON CONFLICT DO NOTHING;""",
            (user_id, sys_role_name),
        )

    except Exception as e:
        logging.info(f'failed to insert into user_roles for user {user_id}')
        logging.exception(e)

    return None


def delete_user_sys_role(cur, user_id, sys_role_name):
    """Deletes user's role in system"""

    try:
        cur.execute(
            """DELETE FROM user_roles 
                    WHERE user_id=%s and role=%s;""",
            (user_id, sys_role_name),
        )

    except Exception as e:
        logging.info(f'failed to delete from user_roles for user {user_id}')
        logging.exception(e)

    return None


def save_preference(cur: cursor, user_id: int, preference: str):
    """Save user preference on types of notifications to be sent by bot"""

    # the master-table is dict_notif_types:

    pref_dict = {
        'topic_new': 0,
        'topic_status_change': 1,
        'topic_title_change': 2,
        'topic_comment_new': 3,
        'topic_inforg_comment_new': 4,
        'topic_field_trip_new': 5,
        'topic_field_trip_change': 6,
        'topic_coords_change': 7,
        'topic_first_post_change': 8,
        'bot_news': 20,
        'all': 30,
        'not_defined': 99,
        'new_searches': 0,
        'status_changes': 1,
        'title_changes': 2,
        'comments_changes': 3,
        'inforg_comments': 4,
        'field_trips_new': 5,
        'field_trips_change': 6,
        'coords_change': 7,
        'first_post_changes': 8,
    }

    def execute_insert(user: int, preference_name: str):
        """execute SQL INSERT command"""

        preference_id = pref_dict[preference_name]
        cur.execute(
            """INSERT INTO user_preferences 
                        (user_id, preference, pref_id) 
                        VALUES (%s, %s, %s) 
                        ON CONFLICT DO NOTHING;""",
            (user, preference_name, preference_id),
        )

        return None

    def execute_delete(user: int, list_of_prefs: List[str]):
        """execute SQL DELETE command"""

        if list_of_prefs:
            for line in list_of_prefs:
                line_id = pref_dict[line]
                cur.execute("""DELETE FROM user_preferences WHERE user_id=%s AND pref_id=%s;""", (user, line_id))
        else:
            cur.execute("""DELETE FROM user_preferences WHERE user_id=%s;""", (user,))

        return None

    def execute_check(user, pref_list):
        """execute SQL SELECT command and returns TRUE / FALSE if something found"""

        result = False

        for line in pref_list:
            cur.execute("""SELECT id FROM user_preferences WHERE user_id=%s AND preference=%s LIMIT 1;""", (user, line))

            if str(cur.fetchone()) != 'None':
                result = True
                break

        return result

    if preference == 'all':
        execute_delete(user_id, [])
        execute_insert(user_id, preference)

    elif preference in {'new_searches', 'status_changes', 'title_changes', 'comments_changes', 'first_post_changes'}:
        if execute_check(user_id, ['all']):
            execute_insert(user_id, 'bot_news')
        execute_delete(user_id, ['all'])

        execute_insert(user_id, preference)

        if preference == 'comments_changes':
            execute_delete(user_id, ['inforg_comments'])

    elif preference == 'inforg_comments':
        if not execute_check(user_id, ['all', 'comments_changes']):
            execute_insert(user_id, preference)

    elif preference in {'field_trips_new', 'field_trips_change', 'coords_change'}:
        # FIXME ‚Äì temp deactivation unlit feature will be ready for prod
        # FIXME ‚Äì to be added to "new_searches" etc group
        # if not execute_check(user_id, ['all']):
        execute_insert(user_id, preference)

    elif preference in {
        '-new_searches',
        '-status_changes',
        '-comments_changes',
        '-inforg_comments',
        '-title_changes',
        '-all',
        '-field_trips_new',
        '-field_trips_change',
        '-coords_change',
        '-first_post_changes',
    }:
        if preference == '-all':
            execute_insert(user_id, 'bot_news')
            execute_insert(user_id, 'new_searches')
            execute_insert(user_id, 'status_changes')
            execute_insert(user_id, 'inforg_comments')
            execute_insert(user_id, 'first_post_changes')
        elif preference == '-comments_changes':
            execute_insert(user_id, 'inforg_comments')

        preference = preference[1:]
        execute_delete(user_id, [preference])

    return None


def update_and_download_list_of_regions(
    cur: cursor, user_id: int, got_message: str, b_menu_set_region: str, b_fed_dist_pick_other: str
) -> str:
    """Upload, download and compose a message on the list of user's regions"""

    msg = ''
    is_first_entry = None
    region_was_in_db = None
    region_is_the_only = None

    fed_okr_dict = {
        '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π –§–û',
        '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π –§–û',
        '–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π –§–û',
        '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –§–û',
        '–°–∏–±–∏—Ä—Å–∫–∏–π –§–û',
        '–£—Ä–∞–ª—å—Å–∫–∏–π –§–û',
        '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –§–û',
        '–Æ–∂–Ω—ã–π –§–û',
    }

    # upload the new regional setting
    folder_dict = {
        '–ú–æ—Å–∫–≤–∞ –∏ –ú–û: –ê–∫—Ç–∏–≤–Ω—ã–µ –ü–æ–∏—Å–∫–∏': [276],
        '–ú–æ—Å–∫–≤–∞ –∏ –ú–û: –ò–Ω—Ñ–æ –ü–æ–¥–¥–µ—Ä–∂–∫–∞': [41],
        '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª.': [236],
        '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª.': [138],
        '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª.': [123, 233],
        '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª.': [271, 315],
        '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª.': [132, 193],
        '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª.': [185],
        '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª.': [151],
        '–ö—É—Ä—Å–∫–∞—è –æ–±–ª.': [186],
        '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª.': [272],
        '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª.': [222, 324],
        '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª.': [155],
        '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª.': [122],
        '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª.': [273],
        '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª.': [126],
        '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª.': [125],
        '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª.': [264],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –¶–§–û': [179],
        '–ê–¥—ã–≥–µ—è': [299],
        '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª.': [336],
        '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª.': [131],
        '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π': [162],
        '–ö—Ä—ã–º': [293],
        '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª.': [157],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –Æ–§–û': [180],
        '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª.': [330],
        '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª.': [370, 369, 368, 367],
        '–ö–∞—Ä–µ–ª–∏—è': [403, 404],
        '–ö–æ–º–∏': [378, 377, 376],
        '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª.': [120, 300],
        '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª.': [214, 371, 372, 373],
        '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.': [210, 383, 382],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–ó–§–û': [181],
        '–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª.': [390],
        '–ë—É—Ä—è—Ç–∏—è': [274],
        '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π': [298],
        '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π': [154],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –î–§–û': [188],
        '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π': [161],
        '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª.': [137, 387, 386, 303],
        '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª.': [202, 308],
        '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π': [269, 318],
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª.': [177, 310],
        '–û–º—Å–∫–∞—è –æ–±–ª.': [153, 314],
        '–¢–æ–º—Å–∫–∞—è –æ–±–ª.': [215, 401],
        '–•–∞–∫–∞—Å–∏—è': [402],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–§–û': [182],
        '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª.': [213],
        '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª.': [391, 392],
        '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª.': [339],
        '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–û': [338],
        '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª.': [280],
        '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û': [204],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –£–§–û': [187],
        '–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω': [191, 235],
        '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª.': [211, 275],
        '–ú–∞—Ä–∏–π –≠–ª': [295, 297],
        '–ú–æ—Ä–¥–æ–≤–∏—è': [294],
        '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª.': [121, 289],
        '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª.': [337],
        '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª.': [170, 322],
        '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π': [143, 325],
        '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª.': [333, 334, 305],
        '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª.': [212],
        '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': [163, 231],
        '–£–¥–º—É—Ä—Ç–∏—è': [237, 239],
        '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª.': [290, 320],
        '–ß—É–≤–∞—à–∏—è': [265, 327],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –ü–§–û': [183],
        '–î–∞–≥–µ—Å—Ç–∞–Ω': [292],
        '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π': [173],
        '–ß–µ—á–Ω—è': [291],
        '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è': [301],
        '–ò–Ω–≥—É—à–µ—Ç–∏—è': [422],
        '–°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è': [423],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–ö–§–û': [184],
        '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –†–§': [116],
    }

    # Reversed dict is needed on the last step
    rev_reg_dict = {value[0]: key for (key, value) in folder_dict.items()}

    # TODO - get the list of regions from PSQL
    # TODO ^^^

    # case for the first entry to the screen of Reg Settings
    if got_message == b_menu_set_region:
        is_first_entry = 'yes'
    elif got_message in fed_okr_dict or got_message == b_fed_dist_pick_other:
        pass
    else:
        try:
            list_of_regs_to_upload = folder_dict[got_message]

            # any region
            cur.execute("""SELECT forum_folder_num from user_regional_preferences WHERE user_id=%s;""", (user_id,))

            user_curr_regs_temp = cur.fetchall()
            user_curr_regs = [reg[0] for reg in user_curr_regs_temp]

            for user_reg in user_curr_regs:
                if list_of_regs_to_upload[0] == user_reg:
                    region_was_in_db = 'yes'
                    break
            if region_was_in_db:
                if len(user_curr_regs) - len(list_of_regs_to_upload) < 1:
                    region_is_the_only = 'yes'

            # Scenario: this setting WAS in place, and now we need to DELETE it
            if region_was_in_db == 'yes' and not region_is_the_only:
                for region in list_of_regs_to_upload:
                    cur.execute(
                        """DELETE FROM user_regional_preferences WHERE user_id=%s and forum_folder_num=%s;""",
                        (user_id, region),
                    )

            # Scenario: this setting WAS in place, but now it's the last one - we cannot delete it
            elif region_was_in_db == 'yes' and region_is_the_only:
                pass

            # Scenario: it's a NEW setting, we need to ADD it
            else:
                for region in list_of_regs_to_upload:
                    cur.execute(
                        """INSERT INTO user_regional_preferences (user_id, forum_folder_num) values (%s, %s);""",
                        (user_id, region),
                    )

        except Exception as e:
            logging.info("failed to upload & download the list of user's regions")
            logging.exception(e)

    # Get the list of resulting regions
    cur.execute("""SELECT forum_folder_num from user_regional_preferences WHERE user_id=%s;""", (user_id,))

    user_curr_regs = cur.fetchall()
    user_curr_regs_list = [reg[0] for reg in user_curr_regs]

    for reg in user_curr_regs_list:
        if reg in rev_reg_dict:
            msg += ',\n &#8226; ' + rev_reg_dict[reg]

    msg = msg[1:]

    if is_first_entry:
        pre_msg = '–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–∏—Å–∫–∏ –≤ –ª—é–±–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Ä–∞–±–æ—Ç—ã –õ–ê.\n'
        pre_msg += (
            '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ ‚Äì –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤.'
            '\n–ß—Ç–æ–±—ã –û–¢–ü–ò–°–ê–¢–¨–°–Ø –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ ‚Äì –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏–æ–Ω–∞ –µ—â–µ —Ä–∞–∑.\n\n'
        )
        pre_msg += '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤:'
        msg = pre_msg + msg
    elif region_is_the_only:
        msg = (
            '–í–∞—à —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' + msg + '\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–≥–∏–æ–Ω—ã, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ '
            '–∫–Ω–æ–ø–∫—É "–≤ –Ω–∞—á–∞–ª–æ", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.'
        )
    elif got_message in fed_okr_dict or got_message == b_fed_dist_pick_other:
        if user_curr_regs_list:
            msg = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤:' + msg
        else:
            msg = '–ü–æ–∫–∞ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø—É—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.'
    else:
        msg = (
            '–ó–∞–ø–∏—Å–∞–ª–∏. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤:' + msg + '\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–≥–∏–æ–Ω—ã, '
            '–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≤ –Ω–∞—á–∞–ª–æ", —á—Ç–æ–±—ã '
            '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.'
        )

    return msg


def get_last_bot_msg(cur: cursor, user_id: int) -> str:
    """Get the last bot message to user to define if user is expected to give exact answer"""

    cur.execute(
        """
        SELECT msg_type FROM msg_from_bot WHERE user_id=%s LIMIT 1;
        """,
        (user_id,),
    )

    extract = cur.fetchone()
    logging.info('get the last bot message to user to define if user is expected to give exact answer')
    logging.info(str(extract))

    if extract and extract != 'None':
        msg_type = extract[0]
    else:
        msg_type = None

    if msg_type:
        logging.info(f'before this message bot was waiting for {msg_type} from user {user_id}')
    else:
        logging.info(f'before this message bot was NOT waiting anything from user {user_id}')

    return msg_type


def generate_yandex_maps_place_link(lat: Union[float, str], lon: Union[float, str], param: str) -> str:
    """Compose a link to yandex map with the given coordinates"""

    coordinates_format = '{0:.5f}'

    if param == 'coords':
        display = str(coordinates_format.format(float(lat))) + ', ' + str(coordinates_format.format(float(lon)))
    else:
        display = '–ö–∞—Ä—Ç–∞'

    msg = f'<a href="https://yandex.ru/maps/?pt={lon},{lat}&z=11&l=map">{display}</a>'

    return msg


def get_param_if_exists(upd: Update, func_input: str):
    """Return either value if exist or None. Used for messages with changing schema from telegram"""

    update = upd  # noqa

    try:
        func_output = eval(func_input)
    except:  # noqa
        func_output = None

    return func_output


def manage_age(cur: cursor, user_id: int, user_input: Optional[str]) -> None:
    """Save user Age preference and generate the list of updated Are preferences"""

    class AgePeriod:
        def __init__(
            self,
            description: str = None,
            name: str = None,
            current=None,
            min_age: int = None,
            max_age: int = None,
            order: int = None,
        ):
            self.desc = description
            self.name = name
            self.now = current
            self.min = min_age
            self.max = max_age
            self.order = order

    age_list = [
        AgePeriod(description='–ú–∞–ª–µ–Ω—å–∫–∏–µ –î–µ—Ç–∏ 0-6 –ª–µ—Ç', name='0-6', min_age=0, max_age=6, order=0),
        AgePeriod(description='–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 7-13 –ª–µ—Ç', name='7-13', min_age=7, max_age=13, order=1),
        AgePeriod(description='–ú–æ–ª–æ–¥–µ–∂—å 14-20 –ª–µ—Ç', name='14-20', min_age=14, max_age=20, order=2),
        AgePeriod(description='–í–∑—Ä–æ—Å–ª—ã–µ 21-50 –ª–µ—Ç', name='21-50', min_age=21, max_age=50, order=3),
        AgePeriod(description='–°—Ç–∞—Ä—à–µ–µ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 51-80 –ª–µ—Ç', name='51-80', min_age=51, max_age=80, order=4),
        AgePeriod(description='–°—Ç–∞—Ä—Ü—ã –±–æ–ª–µ–µ 80 –ª–µ—Ç', name='80-on', min_age=80, max_age=120, order=5),
    ]

    if user_input:
        user_want_activate = True if re.search(r'(?i)–≤–∫–ª—é—á–∏—Ç—å', user_input) else False
        user_new_setting = re.sub(r'.*—á–∏—Ç—å: ', '', user_input)

        chosen_setting = None
        for line in age_list:
            if user_new_setting == line.desc:
                chosen_setting = line
                break

        if user_want_activate:
            cur.execute(
                """INSERT INTO user_pref_age (user_id, period_name, period_set_date, period_min, period_max) 
                        values (%s, %s, %s, %s, %s) ON CONFLICT (user_id, period_min, period_max) DO NOTHING;""",
                (user_id, chosen_setting.name, datetime.datetime.now(), chosen_setting.min, chosen_setting.max),
            )
        else:
            cur.execute(
                """DELETE FROM user_pref_age WHERE user_id=%s AND period_min=%s AND period_max=%s;""",
                (user_id, chosen_setting.min, chosen_setting.max),
            )

    # Block for Generating a list of Buttons
    cur.execute("""SELECT period_min, period_max FROM user_pref_age WHERE user_id=%s;""", (user_id,))
    raw_list_of_periods = cur.fetchall()
    first_visit = False

    if raw_list_of_periods and str(raw_list_of_periods) != 'None':
        for line_raw in raw_list_of_periods:
            got_min, got_max = int(list(line_raw)[0]), int(list(line_raw)[1])
            for line_a in age_list:
                if int(line_a.min) == got_min and int(line_a.max) == got_max:
                    line_a.now = True
    else:
        first_visit = True
        for line_a in age_list:
            line_a.now = True
        for line in age_list:
            cur.execute(
                """INSERT INTO user_pref_age (user_id, period_name, period_set_date, period_min, period_max) 
                        values (%s, %s, %s, %s, %s) ON CONFLICT (user_id, period_min, period_max) DO NOTHING;""",
                (user_id, line.name, datetime.datetime.now(), line.min, line.max),
            )

    list_of_buttons = []
    for line in age_list:
        if line.now:
            list_of_buttons.append([f'–æ—Ç–∫–ª—é—á–∏—Ç—å: {line.desc}'])
        else:
            list_of_buttons.append([f'–≤–∫–ª—é—á–∏—Ç—å: {line.desc}'])

    return list_of_buttons, first_visit


def save_user_pref_topic_type(cur, user_id, pref_id, user_role):
    def save(pref_type_id):
        cur.execute(
            """INSERT INTO user_pref_topic_type (user_id, topic_type_id, timestamp) 
                                            values (%s, %s, %s) ON CONFLICT (user_id, topic_type_id) DO NOTHING;""",
            (user_id, pref_type_id, datetime.datetime.now()),
        )
        return None

    if not (cur and user_id and pref_id):
        return None

    if pref_id == 'default':
        if user_role in {'member', 'new_member'}:
            default_topic_type_id = [0, 3, 4, 5]  # 0=regular, 3=training, 4=info_support, 5=resonance
        else:
            default_topic_type_id = [0, 4, 5]  # 0=regular, 4=info_support, 5=resonance

        for type_id in default_topic_type_id:
            save(type_id)

    else:
        save(pref_id)

    return None


def manage_radius(
    cur: cursor,
    user_id: int,
    user_input: str,
    b_menu: str,
    b_act: str,
    b_deact: str,
    b_change: str,
    b_back: str,
    b_home_coord: str,
    expect_before: str,
) -> Tuple[str, ReplyKeyboardMarkup, None]:
    """Save user Radius preference and generate the actual radius preference"""

    def check_saved_radius(user: int) -> Optional[Any]:
        """check if user already has a radius preference"""

        saved_rad = None
        cur.execute("""SELECT radius FROM user_pref_radius WHERE user_id=%s;""", (user,))
        raw_radius = cur.fetchone()
        if raw_radius and str(raw_radius) != 'None':
            saved_rad = int(raw_radius[0])
        return saved_rad

    list_of_buttons = []
    expect_after = None
    bot_message = None
    reply_markup_needed = True

    if user_input:
        if user_input.lower() == b_menu:
            saved_radius = check_saved_radius(user_id)
            if saved_radius:
                list_of_buttons = [[b_change], [b_deact], [b_home_coord], [b_back]]
                bot_message = (
                    f'–°–µ–π—á–∞—Å –≤–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ {saved_radius} –∫–º. '
                    f'–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ.\n\n'
                    '–í–ê–ñ–ù–û! –í—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç–µ –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Å–µ–º –ø–æ–∏—Å–∫–∞–º, –ø–æ –∫–æ—Ç–æ—Ä—ã–º '
                    '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏–∫–∞–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n\n'
                    '–¢–∞–∫–∂–µ, –±–æ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å '
                    '–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —à—Ç–∞–±–∞, –∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ '
                    '–Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–∏–ª–∏ —Ç–æ–ø–æ–Ω–∏–º–∞), —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ —Ç–µ–º–µ –ø–æ–∏—Å–∫–∞. '
                    '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –ø—Ä—è–º–æ–π.'
                )
            else:
                list_of_buttons = [[b_act], [b_home_coord], [b_back]]
                bot_message = (
                    '–î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∏ –ø–æ–∏—Å–∫–∞–º–∏, '
                    '–¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–∞—à–∏—Ö "–¥–æ–º–∞—à–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç" –¥–æ —à—Ç–∞–±–∞/–≥–æ—Ä–æ–¥–∞ '
                    '–Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –†–∞–¥–∏—É—Å–∞.\n\n'
                    '–í–ê–ñ–ù–û! –í—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç–µ –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Å–µ–º –ø–æ–∏—Å–∫–∞–º, –ø–æ –∫–æ—Ç–æ—Ä—ã–º '
                    '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏–∫–∞–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n\n'
                    '–¢–∞–∫–∂–µ, –ë–æ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å '
                    '–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —à—Ç–∞–±–∞, –∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ '
                    '–Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–∏–ª–∏ —Ç–æ–ø–æ–Ω–∏–º–∞), —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ —Ç–µ–º–µ –ø–æ–∏—Å–∫–∞. '
                    '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –ø—Ä—è–º–æ–π.'
                )

        elif user_input in {b_act, b_change}:
            expect_after = 'radius_input'
            reply_markup_needed = False
            saved_radius = check_saved_radius(user_id)
            if saved_radius:
                bot_message = (
                    f'–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–∏—Å–∫–∞ {saved_radius}.'
                    f'\n\n–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –ø–æ –ø—Ä—è–º–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Å—Ç–æ–≥–æ '
                    f'—á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150) –∏ –Ω–∞–∂–º–∏—Ç–µ –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
                )
            else:
                bot_message = (
                    '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –ø–æ –ø—Ä—è–º–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ '
                    '(–Ω–∞–ø—Ä–∏–º–µ—Ä: 150) –∏ –Ω–∞–∂–º–∏—Ç–µ –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
                )

        elif user_input == b_deact:
            list_of_buttons = [[b_act], [b_menu], [b_back]]
            cur.execute("""DELETE FROM user_pref_radius WHERE user_id=%s;""", (user_id,))
            bot_message = '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫–∞–º —Å–Ω—è—Ç–æ!'

        elif expect_before == 'radius_input':
            number = re.search(r'[0-9]{1,6}', str(user_input))
            if number:
                number = int(number.group())
            if number and number > 0:
                cur.execute(
                    """INSERT INTO user_pref_radius (user_id, radius) 
                               VALUES (%s, %s) ON CONFLICT (user_id) DO
                               UPDATE SET radius=%s;""",
                    (user_id, number, number),
                )
                saved_radius = check_saved_radius(user_id)
                bot_message = (
                    f'–°–æ—Ö—Ä–∞–Ω–∏–ª–∏! –¢–µ–ø–µ—Ä—å –ø–æ–∏—Å–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —à—Ç–∞–±–∞, '
                    f'–ª–∏–±–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (—Ç–æ–ø–æ–Ω–∏–º–∞) –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç '
                    f'{saved_radius} –∫–º –ø–æ –ø—Ä—è–º–æ–π, –Ω–µ –±—É–¥—É—Ç –≤–∞—Å –±–æ–ª—å—à–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å. '
                    f'–ù–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.'
                )
                list_of_buttons = [[b_change], [b_deact], [b_menu], [b_back]]
            else:
                bot_message = '–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ–º?'
                list_of_buttons = [[b_act], [b_menu], [b_back]]

    if reply_markup_needed:
        reply_markup = ReplyKeyboardMarkup(list_of_buttons, resize_keyboard=True)
    else:
        reply_markup = ReplyKeyboardRemove()

    return bot_message, reply_markup, expect_after


def manage_topic_type(
    cur: cursor,
    user_id: int,
    user_input: str,
    b: AllButtons,
    user_callback: dict,
    callback_id: str,
    bot_token: str,
    callback_query_msg_id: str,
) -> Union[tuple[None, None], tuple[str, ReplyKeyboardMarkup]]:
    """Save user Topic Type preference and generate the actual topic type preference message"""

    def check_saved_topic_types(user: int) -> list:
        """check if user already has any preference"""

        saved_pref = []
        cur.execute("""SELECT topic_type_id FROM user_pref_topic_type WHERE user_id=%s ORDER BY 1;""", (user,))
        raw_data = cur.fetchall()
        if raw_data and str(raw_data) != 'None':
            for line in raw_data:
                saved_pref.append(line[0])

        logging.info(f'{saved_pref=}')

        return saved_pref

    def delete_topic_type(user: int, type_id: int) -> None:
        """Delete a certain topic_type for a certain user_id from the DB"""

        cur.execute("""DELETE FROM user_pref_topic_type WHERE user_id=%s AND topic_type_id=%s;""", (user, type_id))
        return None

    def record_topic_type(user: int, type_id: int) -> None:
        """Insert a certain topic_type for a certain user_id into the DB"""

        cur.execute(
            """INSERT INTO user_pref_topic_type (user_id, topic_type_id, timestamp) 
                        VALUES (%s, %s, %s) ON CONFLICT (user_id, topic_type_id) DO NOTHING;""",
            (user, type_id, datetime.datetime.now()),
        )
        return None

    if not user_input:
        return None, None

    list_of_current_setting_ids = check_saved_topic_types(user_id)

    welcome_message = (
        '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–º–µ–Ω—è—Ç—å, –ø–æ –∫–∞–∫–∏–º —Ç–∏–ø–∞–º –ø–æ–∏—Å–∫–æ–≤ –∏–ª–∏ '
        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'
    )

    # when user push "ABOUT" button
    if user_callback and user_callback['action'] == 'about':
        # this scenario assumes three steps: 1. send the "ABOUT" message, 2. delete prev MENU message 3. send NEW MENU
        about_text = (
            '–õ–∏–∑–∞–ê–ª–µ—Ä—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –í –ë–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑ '
            '–Ω–∏—Ö:\n\n'
            '‚Ä¢ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> ‚Äì —ç—Ç–æ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø–æ–∏—Å–∫–∏: –ø–æ—Ç–µ—Ä—è–ª—Å—è —á–µ–ª–æ–≤–µ–∫, –Ω—É–∂–Ω–æ –µ–≥–æ '
            '–Ω–∞–π—Ç–∏, —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. 90% –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n'
            '‚Ä¢ <b>–†–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> (–∏–ª–∏ "–†–µ–∑–æ–Ω–∞–Ω—Å—ã") ‚Äì —ç—Ç–æ —Å—Ä–æ—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞. '
            '–ù–∞ —Ç–∞–∫–∏–µ –ø–æ–∏—Å–∫–∏ –ø—Ä–∏–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.\n'
            '‚Ä¢ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äì —ç—Ç–æ –ø–æ–∏—Å–∫–∏, –∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–µ–∑–¥ –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—ã–µ '
            '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∞ –ª–∏—à—å —Ç—Ä–µ–±—É—é—Ç –ø–æ–º–æ—â–∏ –≤ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–ø–∞–≤—à–µ–º –≤ –≤ —Å–æ—Ü —Å–µ—Ç—è—Ö.\n'
            '‚Ä¢ <b>–û–±—Ä–∞—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> (–ø–æ–∏—Å–∫–∏ —Ä–æ–¥–Ω—ã—Ö) ‚Äì –±—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç '
            '—Å–æ–æ–±—â–∏—Ç—å, –∫—Ç–æ –æ–Ω–∏, –≥–¥–µ –æ–Ω–∏ –∂–∏–≤—É—Ç (–ø–æ—Ç–µ—Ä—è –ø–∞–º—è—Ç–∏). –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ '
            '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.\n'
            '‚Ä¢ <b>–£—á–µ–±–Ω—ã–µ –ø–æ–∏—Å–∫–∏</b> ‚Äì —ç—Ç–æ –≤–∞–∂–Ω—ã–µ –ø–æ–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –õ–∏–∑–∞–ê–ª–µ—Ä—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω—ã'
            '–ø–æ —É—Å–ª–æ–≤–∏—è–º –∫ —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–∞–º –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–∑–≤–∞–Ω—ã –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∞—Å–µ–Ω–∏—è'
            '–ª—é–¥–µ–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ –æ—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ '
            '–£—á–µ–±–Ω—ã—Ö –ø–æ–∏—Å–∫–∞—Ö, —á—Ç–æ–±—ã –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞.\n'
            '‚Ä¢ <b>–ù–æ—á–Ω–æ–π –ø–∞—Ç—Ä—É–ª—å</b> ‚Äì –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –Ω–æ—á–Ω—ã–µ –ø–∞—Ç—Ä—É–ª–∏ –≤ –ø–∞—Ä–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö '
            '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–æ–Ω–∞—Ö.\n'
            '‚Ä¢ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> ‚Äì —ç—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏, –ø—Ä–æ–≤–æ–¥–∏–º—ã–µ –æ—Ç—Ä—è–¥–∞–º–∏ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç. –¢–µ–º–∞—Ç–∏–∫–∞ –∏ '
            '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∫ —Ä–µ–≥–∏–æ–Ω—É. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, '
            '—á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ –æ—Ç—Ä—è–¥–µ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. üí°'
        )
        about_params = {'chat_id': user_id, 'text': about_text, 'parse_mode': 'HTML'}
        make_api_call('sendMessage', bot_token, about_params, "main() if ... user_callback['action'] == 'about'")
        del_message_id = callback_query_msg_id  ###was get_last_user_inline_dialogue(cur, user_id)
        if del_message_id:
            del_params = {'chat_id': user_id, 'message_id': del_message_id}
            make_api_call('deleteMessage', bot_token, del_params)
            user_input = b.set.topic_type.text  # to re-establish menu sending
            welcome_message = f'‚¨ÜÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤—ã—à–µ. \n\n{welcome_message}'

    # when user just enters the MENU for topic types
    if user_input == b.set.topic_type.text:
        bot_message = welcome_message
        list_of_ids_to_change_now = []

    # when user pushed INLINE BUTTON for topic type
    else:
        topic_id = b.topic_types.button_by_hash(user_callback['hash']).id
        list_of_ids_to_change_now = [topic_id]
        user_wants_to_enable = if_user_enables(user_callback)
        if user_wants_to_enable is None:
            bot_message = ''
            pass
        elif user_wants_to_enable is True:  # not a poor design ‚Äì function can be: None, True, False   # noqa
            bot_message = '–°—É–ø–µ—Ä, –º—ã –≤–∫–ª—é—á–∏–ª–∏ —ç—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            send_callback_answer_to_api(bot_token, callback_id, bot_message)
            record_topic_type(user_id, topic_id)
        else:  # user_wants_to_enable == False:  # not a poor design ‚Äì function can be: None, True, False # noqa
            if len(list_of_current_setting_ids) == 1:
                bot_message = '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'
                list_of_ids_to_change_now = []
                send_callback_answer_to_api(bot_token, callback_id, bot_message)
            else:
                bot_message = '–•–æ—Ä–æ—à–æ, –º—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
                send_callback_answer_to_api(bot_token, callback_id, bot_message)
                delete_topic_type(user_id, topic_id)

    keyboard = b.topic_types.keyboard(act_list=list_of_current_setting_ids, change_list=list_of_ids_to_change_now)
    reply_markup = InlineKeyboardMarkup(keyboard)

    logging.info(f'{list_of_current_setting_ids=}')
    logging.info(f'{user_input=}')
    logging.info(f'{list_of_ids_to_change_now=}')
    logging.info(f'{keyboard=}')

    if user_input != b.set.topic_type.text:
        bot_message = welcome_message

    return bot_message, reply_markup


# issue#425 inspired by manage_topic_type
def manage_search_whiteness(
    cur: cursor, user_id: int, user_callback: dict, callback_id: str, callback_query: CallbackQuery, bot_token: str
) -> Union[tuple[None, None], tuple[str, ReplyKeyboardMarkup]]:
    """Saves search_whiteness (accordingly to user's choice of search to follow) and regenerates the search list keyboard"""

    ################# ToDo further: modify select in compose_notifications

    def record_search_whiteness(user: int, search_id: int, new_mark_value) -> None:
        """Save a certain user_pref_search_whitelist for a certain user_id into the DB"""
        if new_mark_value in ['üëÄ ', '‚ùå ']:
            cur.execute(
                """INSERT INTO user_pref_search_whitelist (user_id, search_id, timestamp, search_following_mode) 
                            VALUES (%s, %s, %s, %s) ON CONFLICT (user_id, search_id) DO UPDATE SET timestamp=%s, search_following_mode=%s;""",
                (user, search_id, datetime.datetime.now(), new_mark_value, datetime.datetime.now(), new_mark_value),
            )
        else:
            cur.execute(
                """DELETE FROM user_pref_search_whitelist WHERE user_id=%(user)s and search_id=%(search_id)s;""",
                {'user': user, 'search_id': search_id},
            )
        return None

    logging.info('callback_query=' + str(callback_query))
    logging.info(f'{user_id=}')
    # when user pushed INLINE BUTTON for topic following
    if user_callback and user_callback['action'] == 'search_follow_mode':
        # get inline keyboard from previous message to upadate it
        reply_markup = callback_query.message.reply_markup
        if reply_markup and not isinstance(reply_markup, dict):
            ikb = reply_markup.to_dict()['inline_keyboard']
        else:
            ikb = callback_query.message.reply_markup.inline_keyboard

        new_ikb = []
        logging.info(f'before for index, ikb_row in enumerate(ikb): {ikb=}')
        for index, ikb_row in enumerate(ikb):
            new_ikb += [ikb_row]
            logging.info(f'{ikb_row=}')
            if ikb_row[0].get('callback_data'):
                button_data = eval(ikb_row[0]['callback_data'])
                # Check if the pushed button matches the one in the callback
                if button_data.get('hash') and int(button_data['hash']) == int(user_callback['hash']):
                    pushed_row_index = index

        logging.info(f'before ikb_row = ikb[pushed_row_index]: {new_ikb=}')
        ikb_row = ikb[pushed_row_index]
        old_mark_value = ikb_row[0]['text'][:2]
        if old_mark_value == '  ':
            new_mark_value = 'üëÄ '
            bot_message = '–ü–æ–∏—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.'
        elif old_mark_value == 'üëÄ ':
            new_mark_value = '‚ùå '
            bot_message = '–ü–æ–∏—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.'
        else:
            new_mark_value = '  '
            bot_message = '–ü–æ–º–µ—Ç–∫–∞ —Å–Ω—è—Ç–∞.'
        logging.info(f'before assign new_mark_value: {pushed_row_index=}, {old_mark_value=}, {new_mark_value=}')
        new_ikb[pushed_row_index][0]['text'] = new_mark_value + new_ikb[pushed_row_index][0]['text'][2:]
        # Update the search 'whiteness' (tracking state)
        record_search_whiteness(user_id, int(user_callback['hash']), new_mark_value)
        logging.info(f'before send_callback_answer_to_api: {new_ikb=}')
        send_callback_answer_to_api(bot_token, callback_id, bot_message)
        reply_markup = InlineKeyboardMarkup(new_ikb)
        logging.info(f'before api_callback_edit_inline_keyboard: {reply_markup=}')
        #        if pushed_row_index %2 ==0:##redundant because there is if user_used_inline_button
        #            api_callback_edit_inline_keyboard(bot_token, callback_query, reply_markup, user_id)

        bot_message = callback_query.message.text
    return bot_message, reply_markup


# issue#425
def manage_search_follow_mode(
    cur: cursor, user_id: int, user_callback: dict, callback_id: str, callback_query, bot_token: str
) -> str | None:
    """Switches search following mode on/off"""

    logging.info(f'{callback_query=}, {user_id=}')
    # when user pushed INLINE BUTTON for topic following
    if user_callback and user_callback['action'] == 'search_follow_mode_on':
        set_search_follow_mode(cur, user_id, True)
        bot_message = '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω.'

    elif user_callback and user_callback['action'] == 'search_follow_mode_off':
        set_search_follow_mode(cur, user_id, False)
        bot_message = '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω.'

    send_callback_answer_to_api(bot_token, callback_id, bot_message)

    return bot_message


def manage_if_moscow(
    cur,
    user_id,
    username,
    got_message,
    b_reg_moscow,
    b_reg_not_moscow,
    reply_markup,
    keyboard_fed_dist_set,
    bot_message,
    user_role,
):
    """act if user replied either user from Moscow region or from another one"""

    # if user Region is Moscow
    if got_message == b_reg_moscow:
        save_onboarding_step(user_id, username, 'moscow_replied')
        save_onboarding_step(user_id, username, 'region_set')
        save_user_pref_topic_type(cur, user_id, 'default', user_role)

        if check_if_user_has_no_regions(cur, user_id):
            # add the New User into table user_regional_preferences
            # region is Moscow for Active Searches & InfoPod
            cur.execute(
                """INSERT INTO user_regional_preferences (user_id, forum_folder_num) values
                (%s, %s);""",
                (user_id, 276),
            )
            cur.execute(
                """INSERT INTO user_regional_preferences (user_id, forum_folder_num) values
                (%s, %s);""",
                (user_id, 41),
            )
            cur.execute(
                """INSERT INTO user_pref_region (user_id, region_id) values
                (%s, %s);""",
                (user_id, 1),
            )

    # if region is NOT Moscow
    elif got_message == b_reg_not_moscow:
        save_onboarding_step(user_id, username, 'moscow_replied')

        bot_message = (
            '–°–ø–∞—Å–∏–±–æ, —Ç–æ–≥–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ë–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω: '
            '—Å–Ω–∞—á–∞–ª–∞ –æ–±–æ–∑–Ω–∞—á—å—Ç–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –û–∫—Ä—É–≥, '
            '–∞ –∑–∞—Ç–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–æ–≤, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–∏—Å–∫–∏ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ. '
            '–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
            '—Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.'
        )
        reply_markup = ReplyKeyboardMarkup(keyboard_fed_dist_set, resize_keyboard=True)

    else:
        bot_message = None
        reply_markup = None

    return bot_message, reply_markup


def manage_linking_to_forum(
    cur: cursor,
    got_message: str,
    user_id: int,
    b_set_forum_nick: str,
    b_back_to_start: str,
    bot_request_bfr_usr_msg: str,
    b_admin_menu: str,
    b_test_menu: str,
    b_yes_its_me: str,
    b_no_its_not_me: str,
    b_settings: str,
    reply_markup_main: ReplyKeyboardMarkup,
) -> Tuple[str, ReplyKeyboardMarkup, Optional[str]]:
    """manage all interactions regarding connection of telegram and forum user accounts"""

    bot_message, reply_markup, bot_request_aft_usr_msg = None, None, None

    if got_message == b_set_forum_nick:
        # TODO: if user_is linked to forum so
        cur.execute(
            """SELECT forum_username, forum_user_id 
                       FROM user_forum_attributes 
                       WHERE status='verified' AND user_id=%s 
                       ORDER BY timestamp DESC 
                       LIMIT 1;""",
            (user_id,),
        )
        saved_forum_user = cur.fetchone()

        if not saved_forum_user:
            bot_message = (
                '–ë–æ—Ç —Å–º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –ø–æ–ª–µ–∑–Ω–µ–µ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏ –±—ã—Å—Ç—Ä–µ–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Ñ–æ—Ä—É–º–µ '
                'lizaalert.org\n\n'
                '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω).\n\n'
                '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–º—è —Å —Ñ–æ—Ä—É–º–∞ –∏ '
                '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'
            )
            keyboard = [[b_back_to_start]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            bot_request_aft_usr_msg = 'input_of_forum_username'

        else:
            saved_forum_username, saved_forum_user_id = list(saved_forum_user)

            bot_message = (
                f'–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É '
                f'<a href="https://lizaalert.org/forum/memberlist.php?mode=viewprofile&u='
                f'{saved_forum_user_id}">{saved_forum_username}</a> '
                f'–Ω–∞ —Ñ–æ—Ä—É–º–µ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:)'
            )
            keyboard = [[b_settings], [b_back_to_start]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    elif (
        bot_request_bfr_usr_msg == 'input_of_forum_username'
        and got_message not in {b_admin_menu, b_back_to_start, b_test_menu}
        and len(got_message.split()) < 4
    ):
        message_for_pubsub = [user_id, got_message]
        publish_to_pubsub(Topics.parse_user_profile_from_forum, message_for_pubsub)
        bot_message = '–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 —Å–µ–∫—É–Ω–¥...'
        keyboard = [[b_back_to_start]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    elif got_message in {b_yes_its_me}:
        # Write "verified" for user
        cur.execute(
            """UPDATE user_forum_attributes SET status='verified'
                WHERE user_id=%s and timestamp =
                (SELECT MAX(timestamp) FROM user_forum_attributes WHERE user_id=%s);""",
            (user_id, user_id),
        )

        bot_message = (
            '–û—Ç–ª–∏—á–Ω–æ, –º—ã –∑–∞–ø–∏—Å–∞–ª–∏: —Ç–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å, –∫—Ç–æ –≤—ã –Ω–∞ —Ñ–æ—Ä—É–º–µ.\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç '
            '–≤–∞–º –±–æ–ª–µ–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–∞—Ö, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ '
            '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ.'
        )
        keyboard = [[b_settings], [b_back_to_start]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    elif got_message == b_no_its_not_me:
        bot_message = (
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∏–∫–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ '
            '(–∫–∏—Ä–∏–ª–ª–∏—Ü–∞/–ª–∞—Ç–∏–Ω–∏—Ü–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –≤ –∫–æ–Ω—Ü–µ) –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ'
        )
        keyboard = [[b_set_forum_nick], [b_back_to_start]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        bot_request_aft_usr_msg = 'input_of_forum_username'

    elif got_message == b_back_to_start:
        bot_message = '–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        reply_markup = reply_markup_main

    return bot_message, reply_markup, bot_request_aft_usr_msg


def save_onboarding_step(user_id: str, username: str, step: str) -> None:
    """save the certain step in onboarding"""

    # to avoid eval errors in recipient script
    if not username:
        username = 'unknown'

    message_for_pubsub = {
        'action': 'update_onboarding',
        'info': {'user': user_id, 'username': username},
        'time': str(datetime.datetime.now()),
        'step': step,
    }
    publish_to_pubsub(Topics.topic_for_user_management, message_for_pubsub)

    return None


def check_onboarding_step(cur: cursor, user_id: int, user_is_new: bool) -> Tuple[int, str]:
    """checks the latest step of onboarding"""

    if user_is_new:
        return 0, 'start'

    try:
        cur.execute(
            """SELECT step_id, step_name, timestamp FROM user_onboarding 
                               WHERE user_id=%s ORDER BY step_id DESC;""",
            (user_id,),
        )
        raw_data = cur.fetchone()
        if raw_data:
            step_id, step_name, time = list(raw_data)
        else:
            step_id, step_name = 99, None

    except Exception as e:
        logging.exception(e)
        step_id, step_name = 99, None

    return step_id, step_name


async def leave_chat_async(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.leave_chat(chat_id=context.job.chat_id)

    return None


async def prepare_message_for_leave_chat_async(user_id):
    # TODO DOUBLE
    bot_token = get_app_config().bot_api_token__prod
    application = Application.builder().token(bot_token).build()
    job_queue = application.job_queue
    job_queue.run_once(leave_chat_async, 0, chat_id=user_id)

    async with application:
        await application.initialize()
        await application.start()
        await application.stop()
        await application.shutdown()

    return 'ok'


def process_leaving_chat_async(user_id) -> None:
    asyncio.run(prepare_message_for_leave_chat_async(user_id))

    return None


def process_response_of_api_call(user_id: int, response: Response, call_context: str = '') -> str:
    """process response received as a result of Telegram API call while sending message/location"""

    try:
        if 'ok' not in response.json():
            notify_admin(f'ALARM! "ok" is not in response: {response.json()}, user {user_id}')
            return 'failed'

        if response.ok:
            logging.info(f'message to {user_id} was successfully sent')
            return 'completed'

        elif response.status_code == 400:  # Bad Request
            logging.info(f'Bad Request: message to {user_id} was not sent, {response.json()=}')
            logging.exception('BAD REQUEST')
            return 'cancelled_bad_request'

        elif response.status_code == 403:  # FORBIDDEN
            logging.info(f'Forbidden: message to {user_id} was not sent, {response.reason=}')
            action = None
            if response.text.find('bot was blocked by the user') != -1:
                action = 'block_user'
            if response.text.find('user is deactivated') != -1:
                action = 'delete_user'
            if action:
                message_for_pubsub = {'action': action, 'info': {'user': user_id}}
                publish_to_pubsub(Topics.topic_for_user_management, message_for_pubsub)
                logging.info(f'Identified user id {user_id} to do {action}')
            return 'cancelled'

        elif 420 <= response.status_code <= 429:  # 'Flood Control':
            logging.info(f'Flood Control: message to {user_id} was not sent, {response.reason=}')
            logging.exception('FLOOD CONTROL')
            return 'failed_flood_control'

        # issue425 if not response moved here from the 1st place because it reacted even on response 400
        elif not response:
            logging.info(f'response is None for {user_id=}; {call_context=}')
            return 'failed'

        else:
            logging.info(f'UNKNOWN ERROR: message to {user_id} was not sent, {response.reason=}')
            logging.exception('UNKNOWN ERROR')
            return 'cancelled'

    except Exception as e:
        logging.info('Response is corrupted')
        logging.exception(e)
        logging.info(f'{response.json()=}')
        return 'failed'


def make_api_call(method: str, bot_api_token: str, params: dict, call_context='') -> Union[requests.Response, None]:
    """make an API call to telegram"""

    if not params or not bot_api_token or not method:
        logging.warning(
            f'not params or not bot_api_token or not method: {method=}; {len(bot_api_token)=}; {len(params)=}'
        )
        return None

    if 'chat_id' not in params.keys() and ('scope' not in params.keys() or 'chat_id' not in params['scope'].keys()):
        return None

    url = f'https://api.telegram.org/bot{bot_api_token}/{method}'  # e.g. sendMessage
    headers = {'Content-Type': 'application/json'}

    if 'reply_markup' in params and isinstance(params['reply_markup'], TelegramObject):
        params['reply_markup'] = params['reply_markup'].to_dict()
    logging.info(f'({method=}, {call_context=})..before json_params = json.dumps(params) {params=}; {type(params)=}')
    json_params = json.dumps(params)
    logging.info(f'({method=}, {call_context=})..after json.dumps(params): {json_params=}; {type(json_params)=}')

    with requests.Session() as session:
        try:
            response = session.post(url=url, data=json_params, headers=headers)
            logging.info(f'After session.post: {response=}; {call_context=}')
        except Exception as e:
            response = None
            logging.info('Error in getting response from Telegram')
            logging.exception(e)

    logging.info(f'Before return: {response=}; {call_context=}')
    return response


def get_last_bot_message_id(response: requests.Response) -> int:
    """Get the message id of the bot's message that was just sent"""

    try:
        message_id = response.json()['result']['message_id']

    except Exception as e:  # noqa
        message_id = None

    return message_id


def inline_processing(cur, response, params) -> None:
    """process the response got from inline buttons interactions"""

    if not response or 'chat_id' not in params.keys():
        return None

    chat_id = params['chat_id']
    sent_message_id = get_last_bot_message_id(response)

    if 'reply_markup' in params.keys() and 'inline_keyboard' in params['reply_markup'].keys():
        prev_message_id = get_last_user_inline_dialogue(cur, chat_id)
        logging.info(f'{prev_message_id=}')
        save_last_user_inline_dialogue(cur, chat_id, sent_message_id)

    return None


def send_message_to_api(bot_token, user_id, message, params):
    """send message directly to Telegram API w/o any wrappers ar libraries"""

    try:
        parse_mode = ''
        disable_web_page_preview = ''
        reply_markup = ''
        if params:
            if 'parse_mode' in params.keys():
                parse_mode = f'&parse_mode={params["parse_mode"]}'
            if 'disable_web_page_preview' in params.keys():
                disable_web_page_preview = f'&disable_web_page_preview={params["disable_web_page_preview"]}'
            if 'reply_markup' in params.keys():
                rep_as_str = str(json.dumps(params['reply_markup']))
                reply_markup = f'&reply_markup={urllib.parse.quote(rep_as_str)}'
        message_encoded = f'&text={urllib.parse.quote(message)}'

        request_text = (
            f'https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={user_id}'
            f'{message_encoded}{parse_mode}{disable_web_page_preview}{reply_markup}'
        )

        with requests.Session() as session:
            response = session.get(request_text)
            logging.info(str(response))

    except Exception as e:
        logging.exception(e)
        logging.info('Error in getting response from Telegram')
        response = None

    result = process_response_of_api_call(user_id, response)

    return result


def send_callback_answer_to_api(bot_token: str, callback_query_id: str, message: str) -> str:
    """send a notification when inline button is pushed directly to Telegram API w/o any wrappers ar libraries"""

    try:
        # NB! only 200 characters
        message = message[:200]
        message_encoded = f'&text={urllib.parse.quote(message)}'

        request_text = (
            f'https://api.telegram.org/bot{bot_token}/answerCallbackQuery?callback_query_id='
            f'{callback_query_id}{message_encoded}'
        )

        with requests.Session() as session:
            response = session.get(request_text)
            logging.info(f'send_callback_answer_to_api..{response.json()=}')

    except Exception as e:
        logging.exception(e)
        logging.info('Error in getting response from Telegram')
        response = None

    result = process_response_of_api_call(callback_query_id, response)

    return result


def api_callback_edit_inline_keyboard(bot_token: str, callback_query: dict, reply_markup: dict, user_id: str) -> str:
    """send a notification when inline button is pushed directly to Telegram API w/o any wrappers ar libraries"""
    if reply_markup and not isinstance(reply_markup, dict):
        reply_markup_dict = reply_markup.to_dict()

    params = {
        'chat_id': callback_query['message']['chat']['id'],
        'message_id': callback_query['message']['message_id'],
        'text': callback_query['message']['text'],
        'reply_markup': reply_markup_dict,
    }

    response = make_api_call('editMessageText', bot_token, params, 'api_callback_edit_inline_keyboard')
    logging.info(f'After make_api_call(editMessageText): {response.json()=}')
    result = process_response_of_api_call(user_id, response)
    return result


def get_the_update(bot: Bot, request: Request) -> Update | None:
    """converts a request to an update"""

    try:
        update = Update.de_json(request.get_json(force=True), bot)
    except Exception as e:
        logging.exception(e)
        logging.error('request received has no update')
        update = None

    logging.info(f'update received: {request.get_json(force=True)}')

    return update


def get_basic_update_parameters(update: Update):
    """decompose the incoming update into the key parameters"""

    user_new_status = get_param_if_exists(update, 'update.my_chat_member.new_chat_member.status')
    timer_changed = get_param_if_exists(update, 'update.message.message_auto_delete_timer_changed')
    photo = get_param_if_exists(update, 'update.message.photo')
    document = get_param_if_exists(update, 'update.message.document')
    voice = get_param_if_exists(update, 'update.message.voice')
    contact = get_param_if_exists(update, 'update.message.contact')
    inline_query = get_param_if_exists(update, 'update.inline_query')
    sticker = get_param_if_exists(update, 'update.message.sticker.file_id')
    user_latitude = get_param_if_exists(update, 'update.effective_message.location.latitude')
    user_longitude = get_param_if_exists(update, 'update.effective_message.location.longitude')
    got_message = get_param_if_exists(update, 'update.effective_message.text')

    channel_type = get_param_if_exists(update, 'update.edited_channel_post.chat.type')
    if not channel_type:
        channel_type = get_param_if_exists(update, 'update.channel_post.chat.type')
    if not channel_type:
        channel_type = get_param_if_exists(update, 'update.my_chat_member.chat.type')

    # the purpose of this bot - sending messages to unique users, this way
    # chat_id is treated as user_id and vice versa (which is not true in general)

    username = get_param_if_exists(update, 'update.effective_user.username')
    if not username:
        username = get_param_if_exists(update, 'update.effective_message.from_user.username')

    user_id = get_param_if_exists(update, 'update.effective_user.id')
    if not user_id:
        logging.exception('EFFECTIVE USER.ID IS NOT GIVEN!')
        user_id = get_param_if_exists(update, 'update.effective_message.from_user.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.effective_message.chat.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.edited_channel_post.chat.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.my_chat_member.chat.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.inline_query.from.id')
    if not user_id:
        logging.info('failed to define user_id')

    # FIXME ‚Äì 17.11.2023 ‚Äì playing with getting inline buttons interactions
    callback_query = get_param_if_exists(update, 'update.callback_query')
    callback_query_id = get_param_if_exists(update, 'update.callback_query.id')

    logging.info(f'get_basic_update_parameters..callback_query==, {str(callback_query)}')
    got_hash = None
    got_callback = None
    if callback_query:
        callback_data_text = callback_query.data
        try:
            got_callback = eval(callback_data_text)
            got_hash = got_callback.get('hash')
        except Exception as e:
            logging.exception(e)
            notify_admin(f'callback dict was not recognized for {callback_data_text=}')
        logging.info(f'get_basic_update_parameters..{got_callback=}, {got_hash=} from {callback_data_text=}')
    # FIXME ^^^

    return (
        user_new_status,
        timer_changed,
        photo,
        document,
        voice,
        contact,
        inline_query,
        sticker,
        user_latitude,
        user_longitude,
        got_message,
        channel_type,
        username,
        user_id,
        got_hash,
        got_callback,
        callback_query_id,
        callback_query,
    )


def save_new_user(user_id: int, username: str) -> None:
    """send pubsub message to dedicated script to save new user"""

    username = username if username else 'unknown'
    message_for_pubsub = {
        'action': 'new',
        'info': {'user': user_id, 'username': username},
        'time': str(datetime.datetime.now()),
    }
    publish_to_pubsub(Topics.topic_for_user_management, message_for_pubsub)

    return None


def process_unneeded_messages(
    update, user_id, timer_changed, photo, document, voice, sticker, channel_type, contact, inline_query
):
    """process messages which are not a part of designed dialogue"""

    # CASE 2 ‚Äì when user changed auto-delete setting in the bot
    if timer_changed:
        logging.info('user changed auto-delete timer settings')

    # CASE 3 ‚Äì when user sends a PHOTO or attached DOCUMENT or VOICE message
    elif photo or document or voice or sticker:
        logging.debug('user sends photos to bot')

        bot_message = (
            '–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! –û–¥–Ω–∞–∫–æ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –±–æ—Ç–∞, –Ω–∞—Ö–æ–¥—è—â–∏–º–∏—Å—è –Ω–∞ '
            '–º–µ—Å—Ç–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–ª–µ–≥—Ä–∞–º.'
        )
        data = {'text': bot_message}
        process_sending_message_async(user_id=user_id, data=data)

    # CASE 4 ‚Äì when some Channel writes to bot
    elif channel_type and user_id < 0:
        notify_admin('[comm]: INFO: CHANNEL sends messages to bot!')

        try:
            process_leaving_chat_async(user_id)
            notify_admin(f'[comm]: INFO: we have left the CHANNEL {user_id}')

        except Exception as e:
            logging.info(f'[comm]: Leaving channel was not successful: {user_id}')
            logging.exception(e)
            notify_admin(f'[comm]: Leaving channel was not successful: {user_id}')

    # CASE 5 ‚Äì when user sends Contact
    elif contact:
        bot_message = (
            '–°–ø–∞—Å–∏–±–æ, –±—É–¥—É –∑–Ω–∞—Ç—å. –í–æ—Ç —Ç–æ–ª—å–∫–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç '
            '—Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.'
        )
        data = {'text': bot_message}
        process_sending_message_async(user_id=user_id, data=data)

    # CASE 6 ‚Äì when user mentions bot as @LizaAlert_Searcher_Bot in another telegram chat. Bot should do nothing
    elif inline_query:
        notify_admin('[comm]: User mentioned bot in some chats')
        logging.info(f'bot was mentioned in other chats: {update}')

    return None


def process_block_unblock_user(user_id, user_new_status):
    """processing of system message on user action to block/unblock the bot"""

    try:
        status_dict = {'kicked': 'block_user', 'member': 'unblock_user'}

        # mark user as blocked / unblocked in psql
        message_for_pubsub = {'action': status_dict[user_new_status], 'info': {'user': user_id}}
        publish_to_pubsub(Topics.topic_for_user_management, message_for_pubsub)

        if user_new_status == 'member':
            bot_message = (
                '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ë–æ—Ç —Å–∫—É—á–∞–ª:) –ñ–∞–ª—å, —á—Ç–æ –≤—ã –¥–æ–ª–≥–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏. '
                '–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –≤–∏–∑–∏—Ç–∞. '
                '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç '
                '—É–¥–æ–±–Ω–µ–µ ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≤'
                '<a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ß–∞—Ç'
                '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º</a>. –°–ø–∞—Å–∏–±–æ:)'
            )

            keyboard_main = [['–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏'], ['–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç'], ['–¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏']]
            reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)

            data = {
                'text': bot_message,
                'reply_markup': reply_markup,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True,
            }
            process_sending_message_async(user_id=user_id, data=data)

    except Exception as e:
        logging.info('Error in finding basic data for block/unblock user in Communicate script')
        logging.exception(e)

    return None


def save_bot_reply_to_user(cur: cursor, user_id: int, bot_message: str) -> None:
    """save bot's reply to user in psql"""

    if len(bot_message) > 27 and bot_message[28] in {'–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –∑–∞ 60 –¥–Ω–µ–π', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–∏—Å–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ'}:
        bot_message = bot_message[28]

    cur.execute(
        """INSERT INTO dialogs (user_id, author, timestamp, message_text) values (%s, %s, %s, %s);""",
        (user_id, 'bot', datetime.datetime.now(), bot_message),
    )

    return None


def save_user_message_to_bot(cur: cursor, user_id: int, got_message: str) -> None:
    """save user's message to bot in psql"""

    cur.execute(
        """INSERT INTO dialogs (user_id, author, timestamp, message_text) values (%s, %s, %s, %s);""",
        (user_id, 'user', datetime.datetime.now(), got_message),
    )

    return None


def get_coordinates_from_string(got_message: str, lat_placeholder, lon_placeholder) -> Tuple[float, float]:
    """gets coordinates from string"""

    user_latitude, user_longitude = None, None
    # Check if user input is in format of coordinates
    # noinspection PyBroadException
    try:
        numbers = [float(s) for s in re.findall(r'-?\d+\.?\d*', got_message)]
        if numbers and len(numbers) > 1 and 30 < numbers[0] < 80 and 10 < numbers[1] < 190:
            user_latitude = numbers[0]
            user_longitude = numbers[1]
    except Exception:
        logging.info(f'manual coordinates were not identified from string {got_message}')

    if not (user_latitude and user_longitude):
        user_latitude = lat_placeholder
        user_longitude = lon_placeholder

    return user_latitude, user_longitude


def process_user_coordinates(
    cur: cursor,
    user_id: int,
    user_latitude: float,
    user_longitude: float,
    b_coords_check: str,
    b_coords_del: str,
    b_back_to_start: str,
    bot_request_aft_usr_msg: str,
) -> Optional[Any]:
    """process coordinates which user sent to bot"""

    save_user_coordinates(cur, user_id, user_latitude, user_longitude)

    bot_message = '–í–∞—à–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n'
    bot_message += generate_yandex_maps_place_link(user_latitude, user_longitude, 'coords')
    bot_message += (
        '\n–¢–µ–ø–µ—Ä—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤, –≥–¥–µ —É–¥–∞—Å—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —à—Ç–∞–±–∞ –∏–ª–∏ '
        '–Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ '
        '–ø—Ä—è–º–æ–π –æ—Ç –≤–∞—à–∏—Ö "–¥–æ–º–∞—à–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç".'
    )

    keyboard_settings = [[b_coords_check], [b_coords_del], [b_back_to_start]]
    reply_markup = ReplyKeyboardMarkup(keyboard_settings, resize_keyboard=True)

    data = {'text': bot_message, 'reply_markup': reply_markup, 'parse_mode': 'HTML', 'disable_web_page_preview': True}
    process_sending_message_async(user_id=user_id, data=data)
    # msg_sent_by_specific_code = True

    # saving the last message from bot
    if not bot_request_aft_usr_msg:
        bot_request_aft_usr_msg = 'not_defined'

    try:
        cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))

        cur.execute(
            """INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);""",
            (user_id, datetime.datetime.now(), bot_request_aft_usr_msg),
        )

    except Exception as e:
        logging.info('failed to update the last saved message from bot')
        logging.exception(e)

    save_bot_reply_to_user(cur, user_id, bot_message)

    return None


def run_onboarding(user_id: int, username: str, onboarding_step_id: int, got_message: str) -> int:
    """part of the script responsible for orchestration of activities for non-finally-onboarded users"""

    if onboarding_step_id == 21:  # region_set
        # mark that onboarding is finished
        if got_message:
            save_onboarding_step(user_id, username, 'finished')
            onboarding_step_id = 80

    return onboarding_step_id


def compose_msg_on_user_setting_fullness(cur, user_id: int) -> Union[str, None]:
    """Create a text of message, which describes the degree on how complete user's profile is.
    More settings set ‚Äì more complete profile it. It's done to motivate users to set the most tailored settings."""

    if not cur or not user_id:
        return None

    try:
        cur.execute(
            """SELECT
                            user_id 
                            , CASE WHEN role IS NOT NULL THEN TRUE ELSE FALSE END as role 
                            , CASE WHEN (SELECT TRUE FROM user_pref_age WHERE user_id=%s LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS age
                            , CASE WHEN (SELECT TRUE FROM user_coordinates WHERE user_id=%s LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS coords    
                            , CASE WHEN (SELECT TRUE FROM user_pref_radius WHERE user_id=%s LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS radius
                            , CASE WHEN (SELECT TRUE FROM user_pref_region WHERE user_id=%s LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS region
                            , CASE WHEN (SELECT TRUE FROM user_pref_topic_type WHERE user_id=%s LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS topic_type
                            , CASE WHEN (SELECT TRUE FROM user_pref_urgency WHERE user_id=%s LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS urgency
                            , CASE WHEN (SELECT TRUE FROM user_preferences WHERE user_id=%s 
                                AND preference!='bot_news' LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS notif_type
                            , CASE WHEN (SELECT TRUE FROM user_regional_preferences WHERE user_id=%s LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS region_old
                            , CASE WHEN (SELECT TRUE FROM user_forum_attributes WHERE user_id=%s
                                AND status = 'verified' LIMIT 1) 
                                THEN TRUE ELSE FALSE END AS forum
                        FROM users WHERE user_id=%s;
                        """,
            (
                user_id,
                user_id,
                user_id,
                user_id,
                user_id,
                user_id,
                user_id,
                user_id,
                user_id,
                user_id,
            ),
        )

        raw_data = cur.fetchone()

        if not raw_data:
            return None

        (
            _,
            pref_role,
            pref_age,
            pref_coords,
            pref_radius,
            pref_region,
            pref_topic_type,
            pref_urgency,
            pref_notif_type,
            pref_region_old,
            pref_forum,
        ) = raw_data

        list_of_settings = [pref_notif_type, pref_region_old, pref_coords, pref_radius, pref_age, pref_forum]
        user_score = int(round(sum(list_of_settings) / len(list_of_settings) * 100, 0))

        logging.info(f'List of user settings activation: {list_of_settings=}')
        logging.info(f'User settings completeness score is {user_score}')

        if user_score == 100:
            return None

        user_score_emoji = (
            f'{user_score // 10}\U0000fe0f\U000020e3{user_score - (user_score // 10) * 10}\U0000fe0f\U000020e3'
        )
        message_text = (
            f'–í—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –±–æ—Ç –Ω–∞ {user_score_emoji}%.\n\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º '
            f'–∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n'
        )
        if not pref_notif_type:
            message_text += ' - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π,\n'
        if not pref_region_old:
            message_text += ' - –†–µ–≥–∏–æ–Ω,\n'
        if not pref_coords:
            message_text += ' - –î–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã,\n'
        if not pref_radius:
            message_text += ' - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å,\n'
        if not pref_age:
            message_text += ' - –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ë–í–ü,\n'
        if not pref_forum:
            message_text += ' - –°–≤—è–∑–∞—Ç—å –±–æ—Ç —Å —Ñ–æ—Ä—É–º–æ–º –õ–ê,\n'
        message_text = message_text[:-2]

        return message_text

    except Exception as e:
        logging.info('Exception in "compose_msg_on_user_setting_fullness" function')
        logging.exception(e)
        return None


def if_user_enables(callback: Dict) -> Union[None, bool]:
    """check if user wants to enable or disable a feature"""
    user_wants_to_enable = None

    if callback['action'] == 'on':
        user_wants_to_enable = True
    elif callback['action'] == 'off':
        user_wants_to_enable = False

    return user_wants_to_enable


def save_last_user_inline_dialogue(cur, user_id: int, message_id: int) -> None:
    """Save to DB the user's last interaction via inline buttons"""

    cur.execute(
        """INSERT INTO communications_last_inline_msg 
                    (user_id, timestamp, message_id) values (%s, CURRENT_TIMESTAMP AT TIME ZONE 'UTC', %s)
                    ON CONFLICT (user_id, message_id) DO 
                    UPDATE SET timestamp=CURRENT_TIMESTAMP AT TIME ZONE 'UTC';""",
        (user_id, message_id),
    )
    return None


def get_last_user_inline_dialogue(cur, user_id: int) -> list:
    """Get from DB the user's last interaction via inline buttons"""

    cur.execute("""SELECT message_id FROM communications_last_inline_msg WHERE user_id=%s;""", (user_id,))
    message_id_lines = cur.fetchall()

    message_id_list = []
    if message_id_lines and len(message_id_lines) > 0:
        for message_id_line in message_id_lines:
            message_id_list.append(message_id_line[0])

    return message_id_list


def delete_last_user_inline_dialogue(cur, user_id: int) -> None:
    """Delete form DB the user's last interaction via inline buttons"""

    cur.execute("""DELETE FROM communications_last_inline_msg WHERE user_id=%s;""", (user_id,))
    return None


def get_search_follow_mode(cur, user_id: int):
    cur.execute("""SELECT filter_name FROM user_pref_search_filtering WHERE user_id=%s LIMIT 1;""", (user_id,))
    result_fetched = cur.fetchone()
    result = result_fetched and 'whitelist' in result_fetched[0]
    return result


def set_search_follow_mode(cur: cursor, user_id: int, new_value: bool) -> None:
    filter_name_value = ['whitelist'] if new_value else ['']
    logging.info(f'{filter_name_value=}')
    cur.execute(
        """INSERT INTO user_pref_search_filtering (user_id, filter_name) values (%s, %s)
                    ON CONFLICT (user_id) DO UPDATE SET filter_name=%s;""",
        (user_id, filter_name_value, filter_name_value),
    )
    return None


def main(request: Request) -> str:
    """Main function to orchestrate the whole script"""

    if request.method != 'POST':
        logging.error(f'non-post request identified {request}')
        return 'it was not post request'

    bot_token = get_app_config().bot_api_token__prod
    bot = Bot(token=bot_token)
    update = get_the_update(bot, request)
    return process_update(update)


def process_update(update: Update) -> str:
    bot_token = get_app_config().bot_api_token__prod

    (
        user_new_status,
        timer_changed,
        photo,
        document,
        voice,
        contact,
        inline_query,
        sticker,
        user_latitude,
        user_longitude,
        got_message,
        channel_type,
        username,
        user_id,
        got_hash,
        got_callback,
        callback_query_id,
        callback_query,
    ) = get_basic_update_parameters(update)

    logging.info(f'after get_basic_update_parameters:  {got_callback=}')

    if (
        timer_changed
        or photo
        or document
        or voice
        or sticker
        or (channel_type and user_id < 0)
        or contact
        or inline_query
    ):
        process_unneeded_messages(
            update, user_id, timer_changed, photo, document, voice, sticker, channel_type, contact, inline_query
        )
        return 'finished successfully. it was useless message for bot'

    if user_new_status in {'kicked', 'member'}:
        process_block_unblock_user(user_id, user_new_status)
        return 'finished successfully. it was a system message on bot block/unblock'

    b = AllButtons(full_buttons_dict)

    # Buttons & Keyboards
    # Start & Main menu
    c_start = '/start'
    c_view_act_searches = '/view_act_searches'
    c_view_latest_searches = '/view_latest_searches'
    c_settings = '/settings'
    c_other = '/other'
    c_map = '/map'

    b_role_iam_la = '—è —Å–æ—Å—Ç–æ—é –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç'
    b_role_want_to_be_la = '—è —Ö–æ—á—É –ø–æ–º–æ–≥–∞—Ç—å –õ–∏–∑–∞–ê–ª–µ—Ä—Ç'
    b_role_looking_for_person = '—è –∏—â—É —á–µ–ª–æ–≤–µ–∫–∞'
    b_role_other = '—É –º–µ–Ω—è –¥—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞'
    b_role_secret = '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å'

    b_orders_done = '–¥–∞, –∑–∞—è–≤–∫–∏ –ø–æ–¥–∞–Ω—ã'
    b_orders_tbd = '–Ω–µ—Ç, –Ω–æ —è —Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'

    # TODO - WIP: FORUM
    b_forum_check_nickname = '—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π nickname —Å —Ñ–æ—Ä—É–º–∞'  # noqa
    b_forum_dont_have = '—É –º–µ–Ω—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ –õ–ê'  # noqa
    b_forum_dont_want = '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å / –Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å'  # noqa
    # TODO ^^^

    b_pref_urgency_highest = '—Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º (<2 –º–∏–Ω—É—Ç—ã)'
    b_pref_urgency_high = '–ø–æ—Ä–∞–Ω—å—à–µ (<5 –º–∏–Ω—É—Ç)'
    b_pref_urgency_medium = '–º–æ–≥—É –∂–¥–∞—Ç—å (<10 –º–∏–Ω—É—Ç)'
    b_pref_urgency_low = '–Ω–µ —Å–∏–ª—å–Ω–æ –≤–∞–∂–Ω–æ (>10 –º–∏–Ω—É—Ç)'

    b_yes_its_me = '–¥–∞, —ç—Ç–æ —è'
    b_no_its_not_me = '–Ω–µ—Ç, —ç—Ç–æ –Ω–µ —è'

    b_view_act_searches = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏'
    b_settings = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç'
    b_other = '–¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
    b_map = 'üî•–ö–∞—Ä—Ç–∞ –ü–æ–∏—Å–∫–æ–≤ üî•'
    keyboard_main = [[b_map], [b_view_act_searches], [b_settings], [b_other]]
    reply_markup_main = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)

    # Settings menu
    b_set_pref_notif_type = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    b_set_pref_coords = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"'
    b_set_pref_radius = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å'
    b_set_pref_age = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ë–í–ü'
    b_set_pref_urgency = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'  # <-- TODO: likely to be removed as redundant
    b_set_pref_role = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å'  # <-- TODO # noqa
    b_set_forum_nick = '—Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –±–æ—Ç–∞ –∏ —Ñ–æ—Ä—É–º–∞'
    b_change_forum_nick = '–∏–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ñ–æ—Ä—É–º–∞'  # noqa
    b_set_topic_type = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥ –ø–æ–∏—Å–∫–æ–≤'

    b_back_to_start = '–≤ –Ω–∞—á–∞–ª–æ'

    # Settings - notifications
    b_act_all = '–≤–∫–ª—é—á–∏—Ç—å: –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    b_act_new_search = '–≤–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö'
    b_act_stat_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–æ–≤'
    b_act_all_comments = '–≤–∫–ª—é—á–∏—Ç—å: –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö'
    b_act_inforg_com = '–≤–∫–ª—é—á–∏—Ç—å: –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞'
    b_act_field_trips_new = '–≤–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –≤—ã–µ–∑–¥–∞—Ö'
    b_act_field_trips_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤—ã–µ–∑–¥–∞—Ö'
    b_act_coords_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ —Å–º–µ–Ω–µ –º–µ—Å—Ç–∞ —à—Ç–∞–±–∞'
    b_act_first_post_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ'
    b_deact_all = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ –≥–∏–±–∫–æ'
    b_deact_new_search = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö'
    b_deact_stat_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–æ–≤'
    b_deact_all_comments = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö'
    b_deact_inforg_com = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞'
    b_deact_field_trips_new = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –≤—ã–µ–∑–¥–∞—Ö'
    b_deact_field_trips_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤—ã–µ–∑–¥–∞—Ö'
    b_deact_coords_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ —Å–º–µ–Ω–µ –º–µ—Å—Ç–∞ —à—Ç–∞–±–∞'
    b_deact_first_post_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ'

    # Settings - coordinates
    b_coords_auto_def = KeyboardButton(text='–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"', request_location=True)
    b_coords_man_def = '–≤–≤–µ—Å—Ç–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" –≤—Ä—É—á–Ω—É—é'
    b_coords_check = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"'
    b_coords_del = '—É–¥–∞–ª–∏—Ç—å "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"'

    # Dialogue if Region ‚Äì is Moscow
    b_reg_moscow = '–¥–∞, –ú–æ—Å–∫–≤–∞ ‚Äì –º–æ–π —Ä–µ–≥–∏–æ–Ω'
    b_reg_not_moscow = '–Ω–µ—Ç, —è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞'

    # Settings - Federal Districts
    b_fed_dist_dal_vos = '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π –§–û'
    b_fed_dist_privolz = '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π –§–û'
    b_fed_dist_sev_kaz = '–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π –§–û'
    b_fed_dist_sev_zap = '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –§–û'
    b_fed_dist_sibiria = '–°–∏–±–∏—Ä—Å–∫–∏–π –§–û'
    b_fed_dist_uralsky = '–£—Ä–∞–ª—å—Å–∫–∏–π –§–û'
    b_fed_dist_central = '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –§–û'
    b_fed_dist_yuzhniy = '–Æ–∂–Ω—ã–π –§–û'
    b_fed_dist_other_r = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –†–§'
    b_fed_dist_pick_other = '–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –û–∫—Ä—É–≥'
    keyboard_fed_dist_set = [
        [b_fed_dist_dal_vos],
        [b_fed_dist_privolz],
        [b_fed_dist_sev_kaz],
        [b_fed_dist_sev_zap],
        [b_fed_dist_sibiria],
        [b_fed_dist_uralsky],
        [b_fed_dist_central],
        [b_fed_dist_yuzhniy],
        [b_fed_dist_other_r],
        [b_back_to_start],
    ]

    # Settings - Dalnevostochniy Fed Dist - Regions
    b_reg_buryatiya = '–ë—É—Ä—è—Ç–∏—è'
    b_reg_prim_kray = '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π'
    b_reg_habarovsk = '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π'
    b_reg_amur = '–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª.'
    b_reg_dal_vost_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –î–§–û'
    keyboard_dal_vost_reg_choice = [
        [b_reg_buryatiya],
        [b_reg_prim_kray],
        [b_reg_habarovsk],
        [b_reg_amur],
        [b_reg_dal_vost_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Privolzhskiy Fed Dist - Regions
    b_reg_bashkorkostan = '–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω'
    b_reg_kirov = '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_mariy_el = '–ú–∞—Ä–∏–π –≠–ª'
    b_reg_mordovia = '–ú–æ—Ä–¥–æ–≤–∏—è'
    b_reg_nizhniy = '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª.'
    b_reg_orenburg = '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª.'
    b_reg_penza = '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_perm = '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π'
    b_reg_samara = '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª.'
    b_reg_saratov = '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_tatarstan = '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω'
    b_reg_udmurtiya = '–£–¥–º—É—Ä—Ç–∏—è'
    b_reg_ulyanovsk = '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_chuvashiya = '–ß—É–≤–∞—à–∏—è'
    b_reg_privolz_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –ü–§–û'
    keyboard_privolz_reg_choice = [
        [b_reg_bashkorkostan],
        [b_reg_kirov],
        [b_reg_mariy_el],
        [b_reg_mordovia],
        [b_reg_nizhniy],
        [b_reg_orenburg],
        [b_reg_penza],
        [b_reg_perm],
        [b_reg_samara],
        [b_reg_saratov],
        [b_reg_tatarstan],
        [b_reg_udmurtiya],
        [b_reg_ulyanovsk],
        [b_reg_chuvashiya],
        [b_reg_privolz_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Severo-Kavkazskiy Fed Dist - Regions
    b_reg_dagestan = '–î–∞–≥–µ—Å—Ç–∞–Ω'
    b_reg_stavropol = '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π'
    b_reg_chechnya = '–ß–µ—á–Ω—è'
    b_reg_kabarda = '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è'
    b_reg_ingushetia = '–ò–Ω–≥—É—à–µ—Ç–∏—è'
    b_reg_sev_osetia = '–°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è'
    b_reg_sev_kav_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–ö–§–û'
    keyboard_sev_kav_reg_choice = [
        [b_reg_dagestan],
        [b_reg_stavropol],
        [b_reg_chechnya],
        [b_reg_kabarda],
        [b_reg_ingushetia],
        [b_reg_sev_osetia],
        [b_reg_sev_kav_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Severo-Zapadniy Fed Dist - Regions
    b_reg_vologda = '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª.'
    b_reg_karelia = '–ö–∞—Ä–µ–ª–∏—è'
    b_reg_komi = '–ö–æ–º–∏'
    b_reg_piter = '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª.'
    b_reg_murmansk = '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_pskov = '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_archangelsk = '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª.'
    b_reg_sev_zap_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–ó–§–û'
    keyboard_sev_zap_reg_choice = [
        [b_reg_vologda],
        [b_reg_komi],
        [b_reg_karelia],
        [b_reg_piter],
        [b_reg_murmansk],
        [b_reg_pskov],
        [b_reg_archangelsk],
        [b_reg_sev_zap_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Sibirskiy Fed Dist - Regions
    b_reg_altay = '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π'
    b_reg_irkutsk = '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª.'
    b_reg_kemerovo = '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_krasnoyarsk = '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π'
    b_reg_novosib = '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª.'
    b_reg_omsk = '–û–º—Å–∫–∞—è –æ–±–ª.'
    b_reg_tomsk = '–¢–æ–º—Å–∫–∞—è –æ–±–ª.'
    b_reg_hakasiya = '–•–∞–∫–∞—Å–∏—è'
    b_reg_sibiria_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–§–û'
    keyboard_sibiria_reg_choice = [
        [b_reg_altay],
        [b_reg_irkutsk],
        [b_reg_kemerovo],
        [b_reg_krasnoyarsk],
        [b_reg_novosib],
        [b_reg_omsk],
        [b_reg_tomsk],
        [b_reg_hakasiya],
        [b_reg_sibiria_reg_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Uralskiy Fed Dist - Regions
    b_reg_ekat = '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_kurgan = '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_tyumen = '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_hanty_mansi = '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–û'
    b_reg_chelyabinks = '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_yamal = '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û'
    b_reg_urals_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –£–§–û'
    keyboard_urals_reg_choice = [
        [b_reg_ekat],
        [b_reg_kurgan],
        [b_reg_tyumen],
        [b_reg_hanty_mansi],
        [b_reg_chelyabinks],
        [b_reg_yamal],
        [b_reg_urals_reg_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Central Fed Dist - Regions
    b_reg_belogorod = '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª.'
    b_reg_bryansk = '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_vladimir = '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª.'
    b_reg_voronezh = '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª.'
    b_reg_ivanovo = '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_kaluga = '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª.'
    b_reg_kostroma = '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª.'
    b_reg_kursk = '–ö—É—Ä—Å–∫–∞—è –æ–±–ª.'
    b_reg_lipetsk = '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª.'
    b_reg_msk_act = '–ú–æ—Å–∫–≤–∞ –∏ –ú–û: –ê–∫—Ç–∏–≤–Ω—ã–µ –ü–æ–∏—Å–∫–∏'
    b_reg_msk_inf = '–ú–æ—Å–∫–≤–∞ –∏ –ú–û: –ò–Ω—Ñ–æ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'
    b_reg_orel = '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_ryazan = '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_smolensk = '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_tambov = '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_tver = '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª.'
    b_reg_tula = '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª.'
    b_reg_yaroslavl = '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_central_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –¶–§–û'
    keyboard_central_reg_choice = [
        [b_reg_belogorod],
        [b_reg_bryansk],
        [b_reg_vladimir],
        [b_reg_voronezh],
        [b_reg_ivanovo],
        [b_reg_kaluga],
        [b_reg_kostroma],
        [b_reg_kursk],
        [b_reg_lipetsk],
        [b_reg_msk_act],
        [b_reg_msk_inf],
        [b_reg_orel],
        [b_reg_ryazan],
        [b_reg_smolensk],
        [b_reg_tambov],
        [b_reg_tver],
        [b_reg_tula],
        [b_reg_yaroslavl],
        [b_reg_central_reg_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Yuzhniy Fed Dist - Regions
    b_reg_adygeya = '–ê–¥—ã–≥–µ—è'
    b_reg_astrahan = '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª.'
    b_reg_volgograd = '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª.'
    b_reg_krasnodar = '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π'
    b_reg_krym = '–ö—Ä—ã–º'
    b_reg_rostov = '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª.'
    b_reg_yuzhniy_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –Æ–§–û'
    keyboard_yuzhniy_reg_choice = [
        [b_reg_adygeya],
        [b_reg_astrahan],
        [b_reg_volgograd],
        [b_reg_krasnodar],
        [b_reg_krym],
        [b_reg_rostov],
        [b_reg_yuzhniy_reg_other],
        [b_fed_dist_pick_other],
        [b_back_to_start],
    ]

    # Settings - Fed Dist - Regions
    b_menu_set_region = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–æ–≤'

    full_list_of_regions = (
        keyboard_dal_vost_reg_choice[:-1]
        + keyboard_privolz_reg_choice[:-1]
        + keyboard_sev_kav_reg_choice[:-1]
        + keyboard_sev_zap_reg_choice[:-1]
        + keyboard_sibiria_reg_choice[:-1]
        + keyboard_urals_reg_choice[:-1]
        + keyboard_central_reg_choice[:-1]
        + keyboard_yuzhniy_reg_choice[:-1]
        + [[b_fed_dist_other_r]]
    )  # noqa ‚Äì for strange pycharm indent warning
    full_dict_of_regions = {word[0] for word in full_list_of_regions}

    dict_of_fed_dist = {
        b_fed_dist_dal_vos: keyboard_dal_vost_reg_choice,
        b_fed_dist_privolz: keyboard_privolz_reg_choice,
        b_fed_dist_sev_kaz: keyboard_sev_kav_reg_choice,
        b_fed_dist_sev_zap: keyboard_sev_zap_reg_choice,
        b_fed_dist_sibiria: keyboard_sibiria_reg_choice,
        b_fed_dist_uralsky: keyboard_urals_reg_choice,
        b_fed_dist_central: keyboard_central_reg_choice,
        b_fed_dist_yuzhniy: keyboard_yuzhniy_reg_choice,
    }

    # Other menu
    b_view_latest_searches = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏'
    b_goto_community = '–Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞'
    b_goto_first_search = '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –Ω–æ–≤–∏—á–∫–∞'
    b_goto_photos = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ç–æ —Å –ø–æ–∏—Å–∫–æ–≤'
    keyboard_other = [
        [b_view_latest_searches],
        [b_goto_first_search],
        [b_goto_community],
        [b_goto_photos],
        [b_back_to_start],
    ]

    # Admin - specially keep it for Admin, regular users unlikely will be interested in it

    b_act_titles = '–Ω–∞–∑–≤–∞–Ω–∏—è'  # these are "Title update notification" button

    b_admin_menu = 'admin'
    b_test_menu = 'test'
    b_test_search_follow_mode_on = 'test search follow mode on'  # noqa
    b_test_search_follow_mode_off = 'test search follow mode off'

    b_pref_age_0_6_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –ú–∞–ª–µ–Ω—å–∫–∏–µ –î–µ—Ç–∏ 0-6 –ª–µ—Ç'
    b_pref_age_0_6_deact = '–≤–∫–ª—é—á–∏—Ç—å: –ú–∞–ª–µ–Ω—å–∫–∏–µ –î–µ—Ç–∏ 0-6 –ª–µ—Ç'
    b_pref_age_7_13_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 7-13 –ª–µ—Ç'
    b_pref_age_7_13_deact = '–≤–∫–ª—é—á–∏—Ç—å: –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 7-13 –ª–µ—Ç'
    b_pref_age_14_20_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –ú–æ–ª–æ–¥–µ–∂—å 14-20 –ª–µ—Ç'
    b_pref_age_14_20_deact = '–≤–∫–ª—é—á–∏—Ç—å: –ú–æ–ª–æ–¥–µ–∂—å 14-20 –ª–µ—Ç'
    b_pref_age_21_50_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –í–∑—Ä–æ—Å–ª—ã–µ 21-50 –ª–µ—Ç'
    b_pref_age_21_50_deact = '–≤–∫–ª—é—á–∏—Ç—å: –í–∑—Ä–æ—Å–ª—ã–µ 21-50 –ª–µ—Ç'
    b_pref_age_51_80_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—à–µ–µ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 51-80 –ª–µ—Ç'
    b_pref_age_51_80_deact = '–≤–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—à–µ–µ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 51-80 –ª–µ—Ç'
    b_pref_age_81_on_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—Ü—ã –±–æ–ª–µ–µ 80 –ª–µ—Ç'
    b_pref_age_81_on_deact = '–≤–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—Ü—ã –±–æ–ª–µ–µ 80 –ª–µ—Ç'

    b_pref_radius_act = '–≤–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é'
    b_pref_radius_deact = '–æ—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é'
    b_pref_radius_change = '–∏–∑–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é'

    b_help_yes = '–¥–∞, –ø–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç'
    b_help_no = '–Ω–µ—Ç, –ø–æ–º–æ—â—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'

    # basic markup which will be substituted for all specific cases
    reply_markup = reply_markup_main

    conn_psy = sql_connect_by_psycopg2()
    cur = conn_psy.cursor()

    logging.info(f'Before if got_message and not got_callback: {got_message=}')

    if got_message and not got_callback:
        last_inline_message_ids = get_last_user_inline_dialogue(cur, user_id)
        if last_inline_message_ids:
            for last_inline_message_id in last_inline_message_ids:
                params = {'chat_id': user_id, 'message_id': last_inline_message_id}
                make_api_call('editMessageReplyMarkup', bot_token, params, 'main() if got_message and not got_callback')
            delete_last_user_inline_dialogue(cur, user_id)

    if got_message:
        save_user_message_to_bot(cur, user_id, got_message)

    bot_request_aft_usr_msg = ''
    msg_sent_by_specific_code = False

    user_is_new = check_if_new_user(cur, user_id)
    logging.info(f'After check_if_new_user: {user_is_new=}')
    if user_is_new:
        save_new_user(user_id, username)

    onboarding_step_id, onboarding_step_name = check_onboarding_step(cur, user_id, user_is_new)
    user_regions = get_user_reg_folders_preferences(cur, user_id)
    user_role = get_user_role(cur, user_id)

    # Check what was last request from bot and if bot is expecting user's input
    bot_request_bfr_usr_msg = get_last_bot_msg(cur, user_id)

    # placeholder for the New message from bot as reply to "update". Placed here ‚Äì to avoid errors of GCF
    bot_message = ''

    # ONBOARDING PHASE
    if onboarding_step_id < 80:
        onboarding_step_id = run_onboarding(user_id, username, onboarding_step_id, got_message)

    # get coordinates from the text
    if bot_request_bfr_usr_msg == 'input_of_coords_man':
        user_latitude, user_longitude = get_coordinates_from_string(got_message, user_latitude, user_longitude)

    # if there is any coordinates from user
    if user_latitude and user_longitude:
        process_user_coordinates(
            cur,
            user_id,
            user_latitude,
            user_longitude,
            b_coords_check,
            b_coords_del,
            b_back_to_start,
            bot_request_aft_usr_msg,
        )
        cur.close()
        conn_psy.close()

        return 'finished successfully. in was a message with user coordinates'

    try:
        # if there is a text message from user
        if got_message:
            # if pushed \start
            if got_message == c_start:
                if user_is_new:
                    # FIXME ‚Äì 02.12.2023 ‚Äì hiding menu button for the newcomers
                    #  (in the future it should be done in manage_user script)
                    method = 'setMyCommands'
                    params = {'commands': [], 'scope': {'type': 'chat', 'chat_id': user_id}}
                    response = make_api_call(
                        method=method, bot_api_token=bot_token, params=params, call_context='if user_is_new'
                    )
                    result = process_response_of_api_call(user_id, response)
                    logging.info(f'hiding user {user_id} menu status = {result}')
                    # FIXME ^^^

                    bot_message = (
                        '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ë–æ—Ç –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞–º '
                        '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö –∏–ª–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö '
                        '–≤ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∏—Å–∫–∞—Ö.'
                        '\n\n–ë–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ–Ω—è—é—Ç –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. '
                        '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '
                        '–µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.'
                        '\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                        '—É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å —Å–µ–π—á–∞—Å?'
                    )
                    keyboard_role = [
                        [b_role_iam_la],
                        [b_role_want_to_be_la],
                        [b_role_looking_for_person],
                        [b_role_other],
                        [b_role_secret],
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard_role, resize_keyboard=True)

                else:
                    bot_message = '–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ–Ω—è—é—Ç –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.'
                    reply_markup = reply_markup_main

            elif (
                onboarding_step_id == 20 and got_message in full_dict_of_regions
            ) or got_message == b_reg_moscow:  # "moscow_replied"
                # FIXME ‚Äì 02.12.2023 ‚Äì un-hiding menu button for the newcomers
                #  (in the future it should be done in manage_user script)
                method = 'deleteMyCommands'
                params = {'scope': {'type': 'chat', 'chat_id': user_id}}
                response = make_api_call(method=method, bot_api_token=bot_token, params=params)
                result = process_response_of_api_call(user_id, response)
                # FIXME ^^^

                bot_message = (
                    'üéâ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–∞–∑–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ë–æ—Ç–∞.\n\n'
                    '–°–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ —Å–µ–π—á–∞—Å —É–º–µ–µ—Ç –±–æ—Ç:\n'
                    '- –í—ã—Å—ã–ª–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∏–¥—É—â–∏–º –ø–æ–∏—Å–∫–∞–º\n'
                    '- –í—ã—Å—ã–ª–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–∏—Å–∫–∞–º–∏\n'
                    '- –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ø–æ–∏—Å–∫–∞\n'
                    '- –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –°—Ç–∞—Ç—É—Å–∞ / –ü–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –ò–Ω—Ñ–æ—Ä–≥–∞\n'
                    '- –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                    '- –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–∏–±–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç '
                    '–≤–∞—Å, –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ –∏ —Ç.–ø.\n\n'
                    '–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ '
                    '—Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. '
                    '–ò–ª–∏ –∂–µ –≤—ã —Å—Ä–∞–∑—É –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–∏ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤.\n\n'
                    '–ë–æ—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n'
                    '- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
                    '- –£–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n'
                    '- –£–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–æ –ø–æ–∏—Å–∫–∞\n'
                    '- –£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–ø–∞–≤—à–∏—Ö\n'
                    '- –°–≤—è–∑–∞—Ç—å –±–æ—Ç —Å –§–æ—Ä—É–º–æ–º\n\n'
                    '–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ë–æ—Ç–∞ –Ω–∞–¥–µ—é—Ç—Å—è, —á—Ç–æ –ë–æ—Ç —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö! –£–¥–∞—á–∏!'
                )

                keyboard_role = [
                    [b_set_pref_notif_type],
                    [b_set_pref_coords],
                    [b_set_pref_radius],
                    [b_set_pref_age],
                    [b_set_forum_nick],
                    [b_view_latest_searches],
                    [b_view_act_searches],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_role, resize_keyboard=True)

                if got_message == b_reg_moscow:
                    bot_message, reply_markup = manage_if_moscow(
                        cur,
                        user_id,
                        username,
                        got_message,
                        b_reg_moscow,
                        b_reg_not_moscow,
                        reply_markup,
                        keyboard_fed_dist_set,
                        bot_message,
                        user_role,
                    )
                else:
                    save_onboarding_step(user_id, username, 'region_set')
                    save_user_pref_topic_type(cur, user_id, 'default', user_role)
                    updated_regions = update_and_download_list_of_regions(
                        cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                    )

            elif got_message in {
                b_role_looking_for_person,
                b_role_want_to_be_la,
                b_role_iam_la,
                b_role_secret,
                b_role_other,
                b_orders_done,
                b_orders_tbd,
            }:
                # save user role & onboarding stage
                if got_message in {
                    b_role_want_to_be_la,
                    b_role_iam_la,
                    b_role_looking_for_person,
                    b_role_other,
                    b_role_secret,
                }:
                    user_role = save_user_pref_role(cur, user_id, got_message)
                    save_onboarding_step(user_id, username, 'role_set')

                # get user role = relatives looking for a person
                if got_message == b_role_looking_for_person:
                    bot_message = (
                        '–¢–æ–≥–¥–∞ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç:\n\n'
                        '1. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç –û–î–ù–ò–ú –ò–ó –î–í–£–• —Å–ø–æ—Å–æ–±–æ–≤:\n'
                        '  1.1. –°–ê–ú–û–ï –ë–´–°–¢–†–û–ï ‚Äì –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ 88007005452 (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–æ—Ä—è—á–∞—è '
                        '–ª–∏–Ω–∏—è –õ–∏–∑–∞–ê–ª–µ—Ä—Ç). –í–∞–º –∑–∞–¥–∞–¥—É—Ç —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ '
                        '—É—Å–∫–æ—Ä–∏—Ç –ø–æ–∏—Å–∫, –∏ –ø–æ—Å–æ–≤–µ—Ç—É—é—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è. \n'
                        '  1.2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ https://lizaalert.org/zayavka-na-poisk/ \n'
                        '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞ —Å–∞–π—Ç–µ –Ω—É–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞ –æ—Ç –õ–∏–∑–∞–ê–ª–µ—Ä—Ç. –ù–∞ '
                        '–æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–∞—Å–∞. –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∂–¥–∞—Ç—å, '
                        '–ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–ª–µ–¥—É–µ—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é –æ—Ç—Ä—è–¥–∞ '
                        '88007005452, —Å–æ–æ–±—â–∏–≤, —á—Ç–æ –≤—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ.\n\n'
                        '2. –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ü–æ–ª–∏—Ü–∏—é. –ï—Å–ª–∏ –∏–Ω–æ–µ –Ω–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª–∏ –Ω–∞ –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏,'
                        '–∑–∞—è–≤–∫–∞ –≤ –ü–æ–ª–∏—Ü–∏—é ‚Äì –ø–æ–º–æ–∂–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫. –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π '
                        '—Å–ø–æ—Å–æ–± ‚Äì –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ 102.\n\n'
                        '3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ö–æ–¥ –ø–æ–∏—Å–∫–∞.\n'
                        '–ö–æ–≥–¥–∞ –∑–∞—è–≤–∫–∏ –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç –∏ –ü–æ–ª–∏—Ü–∏—é —Å–¥–µ–ª–∞–Ω—ã, –æ—Ç—Ä—è–¥ –Ω–∞—á–Ω–µ—Ç –ø–µ—Ä–≤—ã–µ '
                        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞: —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–æ–∑–≤–æ–Ω—ã '
                        '–≤ –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∏ —Ç.–ø. –í–µ—Å—å —ç—Ç–æ—Ç'
                        '–ø—Ä–æ—Ü–µ—Å—Å –≤–∞–º –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω, –Ω–æ —á–∞—Å—Ç–æ –ª—é–¥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç–∞–¥–∏–∏'
                        '–ø–æ–∏—Å–∫–∞. –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –º–µ—Ä—ã –Ω–µ –ø–æ–º–æ–≥—É—Ç –∏ –æ—Ç—Ä—è–¥ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å'
                        '–≤—ã–µ–∑–¥ "–Ω–∞ –º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞" ‚Äì —Ç–æ–≥–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ö–æ–¥ –ø–æ–∏—Å–∫–∞ '
                        '—á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π –ë–æ—Ç, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞: –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç'
                        '—É–∫–∞–∑–∞—Ç—å –≤–∞—à —Ä–µ–≥–∏–æ–Ω –∏ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤—ã –±—É–¥–µ—Ç–µ '
                        '–ø–æ–ª—É—á–∞—Ç—å. '
                        '–ö–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º https://lizaalert.org/forum/, '
                        '–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Ç–∞–º.\n'
                        '–û—Ç—Ä—è–¥ —Å–¥–µ–ª–∞–µ—Ç –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–∞—à–µ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ '
                        '—Å–∫–æ—Ä–µ–µ.\n\n'
                        '–°–æ–æ–±—â–∏—Ç–µ, –ø–æ–¥–∞–ª–∏ –ª–∏ –≤—ã –∑–∞—è–≤–∫–∏ –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç –∏ –ü–æ–ª–∏—Ü–∏—é?'
                    )

                    keyboard_orders = [[b_orders_done], [b_orders_tbd]]
                    reply_markup = ReplyKeyboardMarkup(keyboard_orders, resize_keyboard=True)

                # get user role = potential LA volunteer
                elif got_message == b_role_want_to_be_la:
                    bot_message = (
                        '–°—É–ø–µ—Ä! \n'
                        '–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –õ–∏–∑–∞–ê–ª–µ—Ä—Ç? –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å –ª–∏ –≤—ã, –∫–∞–∫ '
                        '–≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å? –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç ‚Äì –Ω–µ –±–µ–¥–∞ ‚Äì —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º '
                        '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å—Ç–∞—Ç—å—ë–π: '
                        'https://takiedela.ru/news/2019/05/25/instrukciya-liza-alert/\n\n'
                        '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–∂–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, '
                        '–≤—ã–ø–æ–ª–Ω—è—é—Ç –ü–æ–∏—Å–∫–æ–≤–∏–∫–∏ "–Ω–∞ –º–µ—Å—Ç–µ –ø–æ–∏—Å–∫–∞". –≠—Ç–æ—Ç –ë–æ—Ç –∫–∞–∫ —Ä–∞–∑ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è '
                        '–ø–æ–º–æ–≥–∞—Ç—å –∏–º–µ–Ω–Ω–æ –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞–º. '
                        '–ï—Å—Ç—å —Ö–æ—Ä–æ—à–∏–π —Å–∞–π—Ç, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∫–∞–∫ –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–µ: '
                        'https://xn--b1afkdgwddgp9h.xn--p1ai/\n\n'
                        '–í —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äì –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ –æ–±—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω, '
                        '8 800 700-54-52, –≥–¥–µ –≤–∞–º –ø–æ–º–æ–≥—É—Ç —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –æ—Ç—Ä—è–¥.\n\n'
                        '–ê –µ—Å–ª–∏ –≤—ã "–∏–∑ –º–∏—Ä–∞ IT" –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—é —ç—Ç–æ–≥–æ –ë–æ—Ç–∞,'
                        '–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç https://t.me/+2J-kV0GaCgwxY2Ni\n\n'
                        '–ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–ª–µ–∑–Ω–æ–π. '
                        '–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ë–æ—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: '
                        '–≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω ‚Äì —ç—Ç–æ –ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –û–±–ª–∞—Å—Ç—å?'
                    )
                    keyboard_coordinates_admin = [[b_reg_moscow], [b_reg_not_moscow]]
                    reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

                # get user role = all others
                elif got_message in {b_role_iam_la, b_role_other, b_role_secret, b_orders_done, b_orders_tbd}:
                    bot_message = (
                        '–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω ‚Äì —ç—Ç–æ '
                        '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –û–±–ª–∞—Å—Ç—å?'
                    )
                    keyboard_coordinates_admin = [[b_reg_moscow], [b_reg_not_moscow]]
                    reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

            elif got_message in {b_reg_not_moscow}:
                bot_message, reply_markup = manage_if_moscow(
                    cur,
                    user_id,
                    username,
                    got_message,
                    b_reg_moscow,
                    b_reg_not_moscow,
                    reply_markup_main,
                    keyboard_fed_dist_set,
                    None,
                    user_role,
                )

            elif got_message == b_help_no:
                bot_message = (
                    '–°–ø–∞—Å–∏–±–æ, –ø–æ–Ω—è—Ç–Ω–æ. –ú—ã –∑–∞–ø–∏—Å–∞–ª–∏. –¢–æ–≥–¥–∞ –±–æ—Ç –±–æ–ª–µ–µ –Ω–µ –±—É–¥–µ—Ç –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç—å, '
                    '–ø–æ–∫–∞ –≤—ã —Å–∞–º–∏ –Ω–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç.\n\n'
                    '–ù–∞ –ø—Ä–æ—â–∞–Ω–∏–µ, –±–æ—Ç —Ö–æ—Ç–µ–ª –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–µ—â–∏, –¥–µ–ª–∞—é—â–∏–µ –º–∏—Ä –ª—É—á—à–µ:\n\n'
                    '1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å <a href="https://t.me/+6LYNNEy8BeI1NGUy">–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ç–æ '
                    '—Å –ø–æ–∏—Å–∫–æ–≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç</a>.\n\n'
                    '2. <a href="https://lizaalert.org/otryadnye-nuzhdy/">–ü–æ–º–æ—á—å '
                    '–æ—Ç—Ä—è–¥—É –õ–∏–∑–∞–ê–ª–µ—Ä—Ç, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –ª—é–¥–µ–π</a>.\n\n'
                    '3. –ü–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
                    '–∏–ª–∏ –æ–ø–ª–∞—Ç–∏–≤ –æ–±–ª–∞—á–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ'
                    '<a href="https://t.me/MikeMikeT">–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞</a>.\n\n'
                    '–ë–æ—Ç –µ—â–µ —Ä–∞–∑ —Ö–æ—Ç–µ–ª –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å, —á—Ç–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤ –±–æ—Ç ‚Äì –æ–Ω'
                    '—Å—Ä–∞–∑—É –∂–µ "–∑–∞–±—É–¥–µ—Ç", —á—Ç–æ –≤—ã —Ä–∞–Ω–µ–µ –ø—Ä–æ—Å–∏–ª–∏ –≤–∞—Å –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å:)\n\n'
                    '–û–±–Ω–∏–º–∞–µ–º:)'
                )
                keyboard = [[b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            elif got_message == b_help_yes:
                bot_message = (
                    '–°—É–ø–µ—Ä! –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.\n\n'
                    '–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–æ–≤ ‚Äì –±–µ–∑ –Ω–µ–≥–æ –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, '
                    '–∫–∞–∫–∏–µ –ø–æ–∏—Å–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n'
                    '1. –õ–∏–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Äì –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '
                    '–≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤),\n'
                    '2. –õ–∏–±–æ –≤—ã–±—Ä–∞–≤ —Ä–µ–≥–∏–æ–Ω –≤—Ä—É—á–Ω—É—é: –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å –§–û = '
                    '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –û–∫—Ä—É–≥, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à —Ä–µ–≥–∏–æ–Ω, –∞ –ø–æ—Ç–æ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å–∞–º —Ä–µ–≥–∏–æ–Ω. '
                    '\n\n'
                )

            # set user pref: urgency
            elif got_message in {
                b_pref_urgency_highest,
                b_pref_urgency_high,
                b_pref_urgency_medium,
                b_pref_urgency_low,
            }:
                save_user_pref_urgency(
                    cur,
                    user_id,
                    got_message,
                    b_pref_urgency_highest,
                    b_pref_urgency_high,
                    b_pref_urgency_medium,
                    b_pref_urgency_low,
                )
                bot_message = '–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ. –ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à –≤—ã–±–æ—Ä.'

            # force user to input a region
            elif not user_regions and not (
                got_message in full_dict_of_regions
                or got_message in dict_of_fed_dist
                or got_message in {b_menu_set_region, c_start, b_settings, c_settings}
            ):
                bot_message = (
                    '–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω. –î–ª—è —ç—Ç–æ–≥–æ '
                    '—Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –§–û (—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥), –∞ –∑–∞—Ç–µ–º –∏ '
                    '—Ä–µ–≥–∏–æ–Ω. –ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –§–û. –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ '
                    '—Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–∞. '
                    '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω.'
                )

                keyboard_coordinates_admin = [[b_menu_set_region]]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

                logging.info(f'user {user_id} is forced to fill in the region')

            elif got_callback and got_callback['action'] == 'search_follow_mode':  # issue#425
                bot_message, reply_markup = manage_search_whiteness(
                    cur, user_id, got_callback, callback_query_id, callback_query, bot_token
                )

            elif got_callback and got_callback['action'] in [
                'search_follow_mode_on',
                'search_follow_mode_off',
            ]:  # issue#425
                bot_message = manage_search_follow_mode(
                    cur, user_id, got_callback, callback_query_id, callback_query, bot_token
                )
                reply_markup = reply_markup_main

            # Send summaries
            elif got_message in {
                b_view_latest_searches,
                b_view_act_searches,
                c_view_latest_searches,
                c_view_act_searches,
            }:
                msg_sent_by_specific_code = True

                temp_dict = {
                    b_view_latest_searches: 'all',
                    b_view_act_searches: 'active',
                    c_view_latest_searches: 'all',
                    c_view_act_searches: 'active',
                }

                cur.execute(
                    """
                    SELECT folder_id, folder_display_name FROM geo_folders_view WHERE folder_type='searches';
                    """
                )

                folders_list = cur.fetchall()

                if get_search_follow_mode(cur, user_id):
                    # issue#425 make inline keyboard - list of searches
                    keyboard = []  # to combine monolit ikb for all user's regions
                    ikb_searches_count = 0

                    region_name = ''
                    for region in user_regions:
                        for line in folders_list:
                            if line[0] == region:
                                region_name = line[1]
                                break

                        logging.info(f'Before if region_name.find...: {bot_message=}; {keyboard=}')
                        # check if region ‚Äì is an archive folder: if so ‚Äì it can be sent only to 'all'
                        if region_name.find('–∞–≤–µ—Ä—à') == -1 or temp_dict[got_message] == 'all':
                            new_region_ikb_list = compose_full_message_on_list_of_searches_ikb(
                                cur, temp_dict[got_message], user_id, region, region_name
                            )
                            keyboard.append(new_region_ikb_list)
                            ikb_searches_count += len(new_region_ikb_list) - 1  ##number of searches in the region
                            logging.info(f'After += compose_full_message_on_list_of_searches_ikb: {keyboard=}')

                    ##msg_sent_by_specific_code for combined ikb start
                    if ikb_searches_count == 0:
                        bot_message = '–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –í–∞—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤–∏–¥–æ–≤ –ø–æ–∏—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
                        params = {
                            'parse_mode': 'HTML',
                            'disable_web_page_preview': True,
                            'reply_markup': reply_markup,
                            'chat_id': user_id,
                            'text': bot_message,
                        }
                        context = f'{user_id=}, context_step=b1'
                        response = make_api_call('sendMessage', bot_token, params, context)
                        logging.info(f'{response=}; {user_id=}; context_step=b2')
                        result = process_response_of_api_call(user_id, response)
                        logging.info(f'{result=}; {user_id=}; context_step=b3')
                        inline_processing(cur, response, params)
                    else:
                        # issue#425 show the inline keyboard

                        ##TBD. May be will be useful to show quantity of marked searches
                        #                        searches_marked = 0
                        #                        for region_keyboard in keyboard:
                        #                            for ikb_line in region_keyboard:
                        #                                if ikb_line[0].get("callback_data") and not ikb_line[0]["text"][:1]=='  ':
                        #                                    searches_marked += 1

                        for i, region_keyboard in enumerate(keyboard):
                            if i == 0:
                                bot_message = """–ú–ï–ù–Æ –ê–ö–¢–£–ê–õ–¨–ù–´–• –ü–û–ò–°–ö–û–í –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø.
–ö–∞–∂–¥—ã–π –ø–æ–∏—Å–∫ –Ω–∏–∂–µ –¥–∞–Ω —Å—Ç—Ä–æ–∫–æ–π –∏–∑ –ø–∞—Ä—ã –∫–Ω–æ–ø–æ–∫: –∫–Ω–æ–ø–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ñ–æ—Ä—É–º.
üëÄ - –∑–Ω–∞–∫ –ø–æ–º–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–∞–º. 
–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –Ω–µ—Ç, —Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –≤—Å–µ–º –ø–æ–∏—Å–∫–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
‚ùå - –ø–æ–º–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ("—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫") - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∞–∫–∏–º –ø–æ–∏—Å–∫–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ."""
                            else:
                                bot_message = ''

                            # Pop region caption from the region_keyboard and put it into bot-message
                            bot_message += '\n' if len(bot_message) > 0 else ''
                            bot_message += (
                                f'<a href="{region_keyboard[0][0]["url"]}">{region_keyboard[0][0]["text"]}</a>'
                            )
                            region_keyboard.pop(0)

                            if i == (len(keyboard) - 1):
                                region_keyboard += [
                                    [
                                        {
                                            'text': '–û—Ç–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
                                            'callback_data': '{"action":"search_follow_mode_off"}',
                                        }
                                    ]
                                ]

                            reply_markup = InlineKeyboardMarkup(region_keyboard)
                            logging.info(f'{bot_message=}; {region_keyboard=}; context_step=b00')
                            # process_sending_message_async(user_id=user_id, data=data)
                            context = f'Before if reply_markup and not isinstance(reply_markup, dict): {reply_markup=}, context_step=b01'
                            logging.info(f'{context=}: {reply_markup=}')
                            if reply_markup and not isinstance(reply_markup, dict):
                                reply_markup = reply_markup.to_dict()
                                context = (
                                    f'After reply_markup.to_dict(): {reply_markup=}; {user_id=}; context_step=b02a'
                                )
                                logging.info(f'{context=}: {reply_markup=}')

                            params = {
                                'parse_mode': 'HTML',
                                'disable_web_page_preview': True,
                                'reply_markup': reply_markup,
                                'chat_id': user_id,
                                'text': bot_message,
                            }
                            context = f'{user_id=}, context_step=b1'
                            response = make_api_call('sendMessage', bot_token, params, context)
                            logging.info(f'{response=}; {user_id=}; context_step=b2')
                            result = process_response_of_api_call(user_id, response)
                            logging.info(f'{result=}; {user_id=}; context_step=b3')
                            inline_processing(cur, response, params)
                    ##msg_sent_by_specific_code for combined ikb end

                    # saving the last message from bot
                    try:
                        cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))
                        cur.execute(
                            'INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);',
                            (user_id, datetime.datetime.now(), 'report'),
                        )
                    except Exception as e:
                        logging.info('failed to save the last message from bot')
                        logging.exception(e)

                else:
                    region_name = ''
                    for region in user_regions:
                        for line in folders_list:
                            if line[0] == region:
                                region_name = line[1]
                                break

                        # check if region ‚Äì is an archive folder: if so ‚Äì it can be sent only to 'all'
                        if region_name.find('–∞–≤–µ—Ä—à') == -1 or temp_dict[got_message] == 'all':
                            bot_message = compose_full_message_on_list_of_searches(
                                cur, temp_dict[got_message], user_id, region, region_name
                            )
                            reply_markup = reply_markup_main
                            data = {
                                'text': bot_message,
                                'reply_markup': reply_markup,
                                'parse_mode': 'HTML',
                                'disable_web_page_preview': True,
                            }
                            process_sending_message_async(user_id=user_id, data=data)

                            # saving the last message from bot
                            try:
                                cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))
                                cur.execute(
                                    'INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);',
                                    (user_id, datetime.datetime.now(), 'report'),
                                )
                            except Exception as e:
                                logging.info('failed to save the last message from bot')
                                logging.exception(e)
                    # issue425 Button for turn on search following mode
                    try:
                        search_follow_mode_ikb = [
                            [
                                {
                                    'text': '–í–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
                                    'callback_data': '{"action":"search_follow_mode_on"}',
                                }
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(search_follow_mode_ikb)
                        if reply_markup and not isinstance(reply_markup, dict):
                            reply_markup = reply_markup.to_dict()
                            context = f'After reply_markup.to_dict(): {reply_markup=}; {user_id=}; context_step=a00'
                            logging.info(f'{context=}: {reply_markup=}')
                        params = {
                            'parse_mode': 'HTML',
                            'disable_web_page_preview': True,
                            'reply_markup': reply_markup,
                            'chat_id': user_id,
                            'text': """–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, 
—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å–æ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤, 
–∞ —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –í–∞–º–∏.""",
                        }
                        context = f'{user_id=}, context_step=a01'
                        response = make_api_call('sendMessage', bot_token, params, context)
                        logging.info(f'{response=}; {user_id=}; context_step=a02')
                        result = process_response_of_api_call(user_id, response)
                        logging.info(f'{result=}; {user_id=}; context_step=a03')
                        inline_processing(cur, response, params)
                    except Exception as e:
                        logging.info('failed to show button for turn on search following mode')
                        logging.exception(e)

            # Perform individual replies

            # Admin mode
            elif got_message.lower() == b_admin_menu:
                bot_message = '–í—ã –≤–æ—à–ª–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª'

                # keyboard for Home Coordinates sharing
                keyboard_coordinates_admin = [[b_back_to_start], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

            # FIXME - WIP
            elif got_message.lower() == b_test_menu:
                add_user_sys_role(cur, user_id, 'tester')
                bot_message = (
                    '–í—ã –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–∞–∑–¥–µ–ª–µ, –≥–¥–µ –≤—Å—ë –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Ç–∞–∫ :) '
                    '–ï—Å–ª–∏ —á—Ç–æ ‚Äì –ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç '
                    'https://t.me/joinchat/2J-kV0GaCgwxY2Ni'
                    '\nüí° –ê –µ—â–µ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å tester - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
                    '\n–î–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ä–æ–ª–∏ tester –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É notest'
                )
                # keyboard_coordinates_admin = [[b_set_topic_type], [b_back_to_start]]
                # [b_set_pref_urgency], [b_set_forum_nick]

                map_button = {'text': '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø–æ–∏—Å–∫–æ–≤', 'web_app': {'url': get_app_config().web_app_url_test}}
                keyboard = [[map_button]]
                reply_markup = InlineKeyboardMarkup(keyboard)
            # FIXME ^^^

            elif got_message.lower() == 'notest':
                delete_user_sys_role(cur, user_id, 'tester')
                bot_message = '–†–æ–ª—å tester —É–¥–∞–ª–µ–Ω–∞. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ! :-) –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
                reply_markup = reply_markup_main

            ###            elif got_message.lower() == b_test_search_follow_mode_on: #issue425
            ###                set_search_follow_mode(cur, user_id, True)
            ###                bot_message = '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
            ###                reply_markup = reply_markup_main

            elif got_message.lower() == b_test_search_follow_mode_off:  ##remains for some time for emrgency case
                set_search_follow_mode(cur, user_id, False)
                bot_message = '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤ –≤–´–∫–ª—é—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
                reply_markup = reply_markup_main

            elif got_message in {b_map, c_map}:
                bot_message = (
                    '–í –ë–æ—Ç–µ –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üó∫Ô∏è–ö–∞—Ä—Ç—É –ü–æ–∏—Å–∫–æ–≤üìç.\n\n'
                    '–ù–∞ –∫–∞—Ä—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏, '
                    '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É –∏–∑ –Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫, '
                    '–∞ —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö –Ø–Ω–¥–µ–∫—Å.\n\n'
                    '–ö–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n'
                    '–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ, –∫–∞–∫ –µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
                    '–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ –≤ '
                    '<a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">—á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</a>.'
                    ''
                )

                map_button = {'text': '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø–æ–∏—Å–∫–æ–≤', 'web_app': {'url': get_app_config().web_app_url}}
                keyboard = [[map_button]]
                reply_markup = InlineKeyboardMarkup(keyboard)

            elif (
                got_message == b.set.topic_type.text
                or b.topic_types.contains(got_message)
                or (got_hash and b.topic_types.contains(got_hash))
            ):  # noqa
                callback_query_message_id = callback_query.message.id if callback_query else None
                bot_message, reply_markup = manage_topic_type(
                    cur, user_id, got_message, b, got_callback, callback_query_id, bot_token, callback_query_message_id
                )

            elif got_message in {
                b_set_pref_age,
                b_pref_age_0_6_act,
                b_pref_age_0_6_deact,
                b_pref_age_7_13_act,
                b_pref_age_7_13_deact,
                b_pref_age_14_20_act,
                b_pref_age_14_20_deact,
                b_pref_age_21_50_act,
                b_pref_age_21_50_deact,
                b_pref_age_51_80_act,
                b_pref_age_51_80_deact,
                b_pref_age_81_on_act,
                b_pref_age_81_on_deact,
            }:
                input_data = None if got_message == b_set_pref_age else got_message
                keyboard, first_visit = manage_age(cur, user_id, input_data)
                keyboard.append([b_back_to_start])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                if got_message.lower() == b_set_pref_age:
                    bot_message = (
                        '–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π '
                        '–≥—Ä—É–ø–ø–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë. –ù–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.'
                    )
                    if first_visit:
                        bot_message = (
                            '–î–∞–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–í–ü '
                            '(–±–µ–∑ –≤–µ—Å—Ç–∏ –ø—Ä–æ–ø–∞–≤—à–∏—Ö), –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. '
                            '–í–∞–∂–Ω–æ, —á—Ç–æ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –ë–í–ü, —Ç–æ–≥–¥–∞ –≤—ã '
                            '–≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n–¢–∞–∫–∂–µ –¥–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ '
                            '—Ä–∞–∑–¥–µ–ª—ã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ü–æ–∏—Å–∫–∏ –∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ü–æ–∏—Å–∫–∏ ‚Äì –≤ –Ω–∏—Ö –≤—ã –≤—Å—ë —Ç–∞–∫–∂–µ '
                            '—Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤.\n\n' + bot_message
                        )
                else:
                    bot_message = '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª–∏.'

            elif (
                got_message in {b_set_pref_radius, b_pref_radius_act, b_pref_radius_deact, b_pref_radius_change}
                or bot_request_bfr_usr_msg == 'radius_input'
            ):
                bot_message, reply_markup, bot_request_aft_usr_msg = manage_radius(
                    cur,
                    user_id,
                    got_message,
                    b_set_pref_radius,
                    b_pref_radius_act,
                    b_pref_radius_deact,
                    b_pref_radius_change,
                    b_back_to_start,
                    b_set_pref_coords,
                    bot_request_bfr_usr_msg,
                )

            elif (
                got_message in {b_set_forum_nick, b_yes_its_me, b_no_its_not_me}
                or bot_request_bfr_usr_msg == 'input_of_forum_username'
            ):
                bot_message, reply_markup, bot_request_aft_usr_msg = manage_linking_to_forum(
                    cur,
                    got_message,
                    user_id,
                    b_set_forum_nick,
                    b_back_to_start,
                    bot_request_bfr_usr_msg,
                    b_admin_menu,
                    b_test_menu,
                    b_yes_its_me,
                    b_no_its_not_me,
                    b_settings,
                    reply_markup_main,
                )

            elif got_message == b_set_pref_urgency:
                bot_message = (
                    '–û—á–µ–Ω—å –º–Ω–æ–≥–∏–µ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è —ç—Ç–∏–º –ë–æ—Ç–æ–º. –ü—Ä–∏ –ª—é–±–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π'
                    ' –ë–æ—Ç —Å—Ç–∞–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –∏ –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è '
                    '—Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –¢–µ–ª–µ–≥—Ä–∞–º–∞. –ò–Ω–æ–≥–¥–∞, –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö'
                    ' –±–æ–ª—å—à–∏—Ö –ø–æ–∏—Å–∫–æ–≤, –æ—á–µ—Ä–µ–¥—å –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç –∏ –∫—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ '
                    '—Å—Ä–∞–∑—É, –∞ –∫–æ–º—É-—Ç–æ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n'
                    '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ–ª–µ–µ "–Ω–∞—Ü–µ–ª–µ–Ω–Ω—ã–º–∏", –æ–±–æ–∑–Ω–∞—á–∏–≤ '
                    '—Å –∫–∞–∫–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ë–æ—Ç–∞. –í —Å–∫–æ–±–∫–∞—Ö '
                    '—É–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ. '
                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –í–∞–º –≤–∞—Ä–∏–∞–Ω—Ç'
                )
                keyboard = [
                    [b_pref_urgency_highest],
                    [b_pref_urgency_high],
                    [b_pref_urgency_medium],
                    [b_pref_urgency_low],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            # DEBUG: for debugging purposes only
            elif got_message.lower() == 'go':
                publish_to_pubsub(Topics.topic_notify_admin, 'test_admin_check')

            elif got_message in {b_other, c_other}:
                bot_message = (
                    '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–∏—Å–∫–∞–º, –ø–µ—Ä–µ–π—Ç–∏ –≤ '
                    '–∫–∞–Ω–∞–ª –ö–æ–º–º—ä—é–Ω–∏—Ç–∏ –∏–ª–∏ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ù–æ–≤–∏—á–∫–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å '
                    '–¥—É—à–µ–≤–Ω—ã–µ —Ñ–æ—Ç–æ —Å –ø–æ–∏—Å–∫–æ–≤'
                )
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            elif got_message in {b_menu_set_region, b_fed_dist_pick_other}:
                bot_message = update_and_download_list_of_regions(
                    cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                )
                reply_markup = ReplyKeyboardMarkup(keyboard_fed_dist_set, resize_keyboard=True)

            elif got_message in dict_of_fed_dist:
                updated_regions = update_and_download_list_of_regions(
                    cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                )
                bot_message = updated_regions
                reply_markup = ReplyKeyboardMarkup(dict_of_fed_dist[got_message], resize_keyboard=True)

            elif got_message in full_dict_of_regions:
                updated_regions = update_and_download_list_of_regions(
                    cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                )
                bot_message = updated_regions
                keyboard = keyboard_fed_dist_set
                for fed_dist in dict_of_fed_dist:
                    for region in dict_of_fed_dist[fed_dist]:
                        if region[0] == got_message:
                            keyboard = dict_of_fed_dist[fed_dist]
                            break
                    else:
                        continue
                    break
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                if onboarding_step_id == 20:  # "moscow_replied"
                    save_onboarding_step(user_id, username, 'region_set')
                    save_user_pref_topic_type(cur, user_id, 'default', user_role)

            elif got_message in {b_settings, c_settings}:
                bot_message = (
                    '–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–µ –¥–ª—è –≤–∞—Å '
                    '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö '
                    '–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ –º–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞. –í—ã –≤ –ª—é–±–æ–π '
                    '–º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
                )

                message_prefix = compose_msg_on_user_setting_fullness(cur, user_id)
                if message_prefix:
                    bot_message = f'{bot_message}\n\n{message_prefix}'

                keyboard_settings = [
                    [b_set_pref_notif_type],
                    [b_menu_set_region],
                    [b_set_topic_type],
                    [b_set_pref_coords],
                    [b_set_pref_radius],
                    [b_set_pref_age],
                    [b_set_forum_nick],
                    [b_back_to_start],
                ]  # #AK added b_set_forum_nick for issue #6
                reply_markup = ReplyKeyboardMarkup(keyboard_settings, resize_keyboard=True)

            elif got_message == b_set_pref_coords:
                bot_message = (
                    '–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ—Å–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'
                    ' (–¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ ‚Äì –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    '–∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç). '
                    '–ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Äì –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ '
                    '—Ä–∞–∑—Ä–µ—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. '
                    '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è '
                    '–≤–∞—à–∏–º "–¥–æ–º–æ–º", –æ—Ç–∫—É–¥–∞ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ '
                    '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ–∏—Å–∫–æ–≤.'
                )
                keyboard_coordinates_1 = [
                    [b_coords_auto_def],
                    [b_coords_man_def],
                    [b_coords_check],
                    [b_coords_del],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_1, resize_keyboard=True)

            elif got_message == b_coords_del:
                delete_user_coordinates(cur, user_id)
                bot_message = (
                    '–í–∞—à–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '
                    '–¥–æ –ø–æ–∏—Å–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.\n'
                    '–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã". '
                    '–§—É–Ω–∫—Ü–∏—è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è '
                    '–Ω–æ—Å–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ‚Äì –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                    '—Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º.'
                )
                keyboard_coordinates_1 = [[b_coords_auto_def], [b_coords_man_def], [b_coords_check], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_1, resize_keyboard=True)

            elif got_message == b_coords_man_def:
                bot_message = (
                    '–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –¥–æ–º–∞ –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ—Å—Ç–æ '
                    '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ. –§–æ—Ä–º–∞—Ç: XX.XXX–•–•, XX.XXX–•–•, –≥–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ '
                    '–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º. –®–∏—Ä–æ—Ç–∞ (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 30 '
                    '–∏ 80, –î–æ–ª–≥–æ—Ç–∞ (–≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ) ‚Äì –º–µ–∂–¥—É 10 –∏ 190.'
                )
                bot_request_aft_usr_msg = 'input_of_coords_man'
                reply_markup = ReplyKeyboardRemove()

            elif got_message == b_coords_check:
                lat, lon = show_user_coordinates(cur, user_id)
                if lat and lon:
                    bot_message = '–í–∞—à–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" '
                    bot_message += generate_yandex_maps_place_link(lat, lon, 'coords')

                else:
                    bot_message = '–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é.'

                keyboard_coordinates_1 = [
                    [b_coords_auto_def],
                    [b_coords_man_def],
                    [b_coords_check],
                    [b_coords_del],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_1, resize_keyboard=True)

            elif got_message == b_back_to_start:
                bot_message = '–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                reply_markup = reply_markup_main

            elif got_message == b_goto_community:
                bot_message = (
                    '–ë–æ—Ç –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å —Å–æ–æ—Ç—Ä—è–¥–Ω–∏–∫–∞–º–∏ –≤ '
                    '<a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ß–∞—Ç–µ '
                    '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º</a>. –¢–∞–º –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏, —É–∫–∞–∑–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã '
                    '–∏ –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.'
                )
                keyboard_other = [[b_view_latest_searches], [b_goto_first_search], [b_goto_photos], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            elif got_message == b_goto_first_search:
                bot_message = (
                    '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–º –î–ü–°–û ¬´–õ–∏–∑–∞–ê–ª–µ—Ä—Ç¬ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    '<a href="https://lizaalert.org/forum/viewtopic.php?t=56934">'
                    '–ø–æ—Å–µ—Ç–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä—É–º–∞</a>, —Ç–∞–º –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π '
                    '–¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.'
                    '–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –ø–µ—Ä–≤–æ–º—É –ø–æ–∏—Å–∫—É ‚Äì –ø—Ä–∏–≥–ª–∞—à–∞–µ–º '
                    '<a href="https://xn--b1afkdgwddgp9h.xn--p1ai/">–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Å–Ω–æ–≤–∞–º–∏ '
                    '—Ä–∞–±–æ—Ç—ã –õ–ê</a>. –í—Å—é —Ç–µ–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã –õ–ê –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ '
                    '–æ–±—É—á–µ–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –õ–ê. –ù–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π—Ç–∏ '
                    '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∞ –≤—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –≤—ã–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–∏—Å–∫ ‚Äì —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å '
                    '–¥–ª—è –≤–∞—Å.'
                )
                keyboard_other = [[b_view_latest_searches], [b_goto_community], [b_goto_photos], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            elif got_message == b_goto_photos:
                bot_message = (
                    '–ï—Å–ª–∏ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ü–°–†, –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π '
                    '<a href="https://t.me/+6LYNNEy8BeI1NGUy">—Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ñ–æ—Ç–æ —Å '
                    '–ø–æ–∏—Å–∫–æ–≤</a>. –í—Å–µ —Ñ–æ—Ç–æ ‚Äì —Å–¥–µ–ª–∞–Ω—ã –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ü–°–†.'
                )
                keyboard_other = [
                    [b_view_latest_searches],
                    [b_goto_community],
                    [b_goto_first_search],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            # special block for flexible menu on notification preferences
            elif got_message in {
                b_act_all,
                b_deact_all,
                b_act_new_search,
                b_act_stat_change,
                b_act_titles,
                b_act_all_comments,
                b_set_pref_notif_type,
                b_deact_stat_change,
                b_deact_all_comments,
                b_deact_new_search,
                b_act_inforg_com,
                b_deact_inforg_com,
                b_act_field_trips_new,
                b_deact_field_trips_new,
                b_act_field_trips_change,
                b_deact_field_trips_change,
                b_act_coords_change,
                b_deact_coords_change,
                b_act_first_post_change,
                b_deact_first_post_change,
            }:
                # save preference for +ALL
                if got_message == b_act_all:
                    bot_message = (
                        '–°—É–ø–µ—Ä! —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ —Å–ª—É—á–∞—è—Ö: '
                        '–ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ (—Å—Ç–æ–ø, –ù–ñ, –ù–ü), '
                        '–ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –≤—Å–µ–º –ø–æ–∏—Å–∫–∞–º. –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç '
                        '–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'all')

                # save preference for -ALL
                elif got_message == b_deact_all:
                    bot_message = '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø—ã –ø–æ–ª—É—á–∞–µ–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ–ª–µ–µ –≥–∏–±–∫–æ'
                    save_preference(cur, user_id, '-all')

                # save preference for +NEW SEARCHES
                elif got_message == b_act_new_search:
                    bot_message = (
                        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ '
                        '–ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞. –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
                        '—Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'new_searches')

                # save preference for -NEW SEARCHES
                elif got_message == b_deact_new_search:
                    bot_message = '–ó–∞–ø–∏—Å–∞–ª–∏'
                    save_preference(cur, user_id, '-new_searches')

                # save preference for +STATUS UPDATES
                elif got_message == b_act_stat_change:
                    bot_message = (
                        '–û—Ç–ª–∏—á–Ω–æ! —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ '
                        '–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–æ–≤ (–ù–ñ, –ù–ü, –°–¢–û–ü –∏ —Ç.–ø.). –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç '
                        '–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'status_changes')

                # save preference for -STATUS UPDATES
                elif got_message == b_deact_stat_change:
                    bot_message = '–ó–∞–ø–∏—Å–∞–ª–∏'
                    save_preference(cur, user_id, '-status_changes')

                # save preference for TITLE UPDATES
                elif got_message == b_act_titles:
                    bot_message = '–û—Ç–ª–∏—á–Ω–æ!'
                    save_preference(cur, user_id, 'title_changes')

                # save preference for +COMMENTS
                elif got_message == b_act_all_comments:
                    bot_message = (
                        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç —É –≤–∞—Å! –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç '
                        '–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'comments_changes')

                # save preference for -COMMENTS
                elif got_message == b_deact_all_comments:
                    bot_message = (
                        '–ó–∞–ø–∏—Å–∞–ª–∏. –ú—ã —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ '
                        '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞. –ò—Ö —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å'
                    )
                    save_preference(cur, user_id, '-comments_changes')

                # save preference for +InforgComments
                elif got_message == b_act_inforg_com:
                    bot_message = (
                        '–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º, —Ç–æ —Ç–µ–ø–µ—Ä—å '
                        '–≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –æ—Ç –ò–Ω—Ñ–æ—Ä–≥–∞. –ï—Å–ª–∏ –∂–µ –≤—ã '
                        '—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äì —Ç–æ –≤—Å—ë –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –±–æ—Ç '
                        '—É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –ø–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º, –≤–∫–ª—é—á–∞—è –æ—Ç –ò–Ω—Ñ–æ—Ä–≥–∞'
                    )
                    save_preference(cur, user_id, 'inforg_comments')

                # save preference for -InforgComments
                elif got_message == b_deact_inforg_com:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –æ—Ç –ò–Ω—Ñ–æ—Ä–≥–∞'
                    save_preference(cur, user_id, '-inforg_comments')

                # save preference for +FieldTripsNew
                elif got_message == b_act_field_trips_new:
                    bot_message = (
                        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—ã–µ–∑–¥–∞—Ö –ø–æ —É–∂–µ –∏–¥—É—â–∏–º '
                        '–ø–æ–∏—Å–∫–∞–º. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –Ω–æ–≤—ã–º —Ç–µ–º–∞–º –Ω–∞ '
                        '—Ñ–æ—Ä—É–º–µ, –∞ –∏–º–µ–Ω–Ω–æ –æ —Ç–æ–º, —á—Ç–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–µ –≤ –ü–ï–†–í–û–ú –ø–æ—Å—Ç–µ '
                        '–ø–æ—è–≤–∏–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –≤—ã–µ–∑–¥–µ'
                    )
                    save_preference(cur, user_id, 'field_trips_new')

                # save preference for -FieldTripsNew
                elif got_message == b_deact_field_trips_new:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º –≤—ã–µ–∑–¥–∞–º'
                    save_preference(cur, user_id, '-field_trips_new')

                # save preference for +FieldTripsChange
                elif got_message == b_act_field_trips_change:
                    bot_message = (
                        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø—Ä–∏ '
                        '–≤—ã–µ–∑–¥–∞—Ö, –≤ —Ç.—á. –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–µ–∑–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, '
                        '—á—Ç–æ —ç—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –ü–ï–†–í–û–ú –ø–æ—Å—Ç–µ –ø–æ–∏—Å–∫–∞.'
                    )
                    save_preference(cur, user_id, 'field_trips_change')

                # save preference for -FieldTripsChange
                elif got_message == b_deact_field_trips_change:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤—ã–µ–∑–¥–æ–≤'
                    save_preference(cur, user_id, '-field_trips_change')

                # save preference for +CoordsChange
                elif got_message == b_act_coords_change:
                    bot_message = (
                        '–ï—Å–ª–∏ —É —à—Ç–∞–±–∞ –ø–æ–º–µ–Ω—è—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∏ –æ–± —ç—Ç–æ–º –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–µ—Ä–≤–æ–º '
                        '–ø–æ—Å—Ç–µ –Ω–∞ —Ñ–æ—Ä—É–º–µ) ‚Äì –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ–± —ç—Ç–æ–º'
                    )
                    save_preference(cur, user_id, 'coords_change')

                # save preference for -CoordsChange
                elif got_message == b_deact_coords_change:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ –º–µ—Å—Ç–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç) —à—Ç–∞–±–∞'
                    save_preference(cur, user_id, '-coords_change')

                # save preference for -FirstPostChanges
                elif got_message == b_act_first_post_change:
                    bot_message = (
                        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ü–µ—Ä–≤–æ–º –ü–æ—Å—Ç–µ'
                        ' –ò–Ω—Ñ–æ—Ä–≥–∞, –≥–¥–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞'
                    )
                    save_preference(cur, user_id, 'first_post_changes')

                # save preference for -FirstPostChanges
                elif got_message == b_deact_first_post_change:
                    bot_message = (
                        '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ü–µ—Ä–≤–æ–º –ü–æ—Å—Ç–µ'
                        ' –ò–Ω—Ñ–æ—Ä–≥–∞ c –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞'
                    )
                    save_preference(cur, user_id, '-first_post_changes')

                # GET what are preferences
                elif got_message == b_set_pref_notif_type:
                    prefs = compose_user_preferences_message(cur, user_id)
                    if prefs[0] == '–ø–æ–∫–∞ –Ω–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' or prefs[0] == '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞':
                        bot_message = '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å'
                    else:
                        bot_message = '–°–µ–π—á–∞—Å —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n'
                        bot_message += prefs[0]

                else:
                    bot_message = 'empty message'

                if got_message == b_act_all:
                    keyboard_notifications_flexible = [[b_deact_all], [b_back_to_start]]
                elif got_message == b_deact_all:
                    keyboard_notifications_flexible = [
                        [b_act_all],
                        [b_deact_new_search],
                        [b_deact_stat_change],
                        [b_act_all_comments],
                        [b_deact_inforg_com],
                        [b_deact_first_post_change],
                        [b_back_to_start],
                    ]
                else:
                    # getting the list of user notification preferences
                    prefs = compose_user_preferences_message(cur, user_id)
                    keyboard_notifications_flexible = [
                        [b_act_all],
                        [b_act_new_search],
                        [b_act_stat_change],
                        [b_act_all_comments],
                        [b_act_inforg_com],
                        [b_act_first_post_change],
                        [b_back_to_start],
                    ]

                    for line in prefs[1]:
                        if line == 'all':
                            keyboard_notifications_flexible = [[b_deact_all], [b_back_to_start]]
                        elif line == 'new_searches':
                            keyboard_notifications_flexible[1] = [b_deact_new_search]
                        elif line == 'status_changes':
                            keyboard_notifications_flexible[2] = [b_deact_stat_change]
                        elif line == 'comments_changes':
                            keyboard_notifications_flexible[3] = [b_deact_all_comments]
                        elif line == 'inforg_comments':
                            keyboard_notifications_flexible[4] = [b_deact_inforg_com]
                        elif line == 'first_post_changes':
                            keyboard_notifications_flexible[5] = [b_deact_first_post_change]

                reply_markup = ReplyKeyboardMarkup(keyboard_notifications_flexible, resize_keyboard=True)

            # in case of other user messages:
            else:
                # If command in unknown
                bot_message = (
                    '–Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ ' '–∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ'
                )
                reply_markup = reply_markup_main

            if not msg_sent_by_specific_code:
                # FIXME ‚Äì 17.11.2023 ‚Äì migrating from async to pure api call
                """
                admin_id = get_app_config().my_telegram_id
                if user_id != admin_id:
                    data = {'text': bot_message, 'reply_markup': reply_markup,
                            'parse_mode': 'HTML', 'disable_web_page_preview': True}
                    process_sending_message_async(user_id=user_id, data=data)
                else:"""

                context_step = '01a1'
                context = f'if reply_markup and not isinstance(reply_markup, dict): {reply_markup=}, {context_step=}'
                logging.info(f'{context=}: {reply_markup=}')
                if reply_markup and not isinstance(reply_markup, dict):
                    reply_markup = reply_markup.to_dict()
                    context_step = '02a1'
                    context = f'After reply_markup.to_dict(): {reply_markup=}, {context_step=}'
                    logging.info(f'{context=}: {reply_markup=}')

                if got_hash and got_callback and got_callback['action'] != 'about':
                    user_used_inline_button = True
                else:
                    user_used_inline_button = False

                if user_used_inline_button:
                    # call editMessageText to edit inline keyboard
                    # in the message where inline button was pushed
                    last_user_message_id = callback_query.message.id  ##was get_last_user_inline_dialogue(cur, user_id)
                    logging.info(f'{last_user_message_id=}')
                    # params['message_id'] = last_user_message_id
                    params = {
                        'chat_id': user_id,
                        'text': bot_message,
                        'message_id': last_user_message_id,
                        'reply_markup': reply_markup,
                    }
                    context_step = '1a1'
                    context = f'main() if user_used_inline_button: {user_id=}, {context_step=}'
                    response = make_api_call('editMessageText', bot_token, params, context)
                    context_step = '1a2'
                    context = f'main() if user_used_inline_button: {user_id=}, {context_step=}'
                    logging.info(f'{response=}; {context=}')

                else:
                    params = {
                        'parse_mode': 'HTML',
                        'disable_web_page_preview': True,
                        'reply_markup': reply_markup,
                        'chat_id': user_id,
                        'text': bot_message,
                    }
                    context_step = '1b1'
                    context = f'main() if user_used_inline_button: else: {user_id=}, {context_step=}'
                    response = make_api_call('sendMessage', bot_token, params, context)
                    context_step = '1b2'
                    context = f'main() if user_used_inline_button: else: {user_id=}, {context_step=}'
                    logging.info(f'{response=}; {context=}')

                context_step = '2'
                context = f'main() after if user_used_inline_button: {user_id=}, {context_step=}'
                logging.info(f'{response=}; {context=}')
                context_step = '3'
                context = f'main() after if user_used_inline_button: {user_id=}, {context_step=}'
                result = process_response_of_api_call(user_id, response)
                inline_processing(cur, response, params)

                logging.info(f'RESPONSE {response}')
                logging.info(f'RESULT {result}')
                # FIXME ^^^

            # saving the last message from bot
            if not bot_request_aft_usr_msg:
                bot_request_aft_usr_msg = 'not_defined'

            try:
                cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))

                cur.execute(
                    """
                    INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);
                    """,
                    (user_id, datetime.datetime.now(), bot_request_aft_usr_msg),
                )

            except Exception as e:
                logging.info(f'failed updates of table msg_from_bot for user={user_id}')
                logging.exception(e)

        # all other cases when bot was not able to understand the message from user
        else:
            logging.info('DBG.C.6. THERE IS a COMM SCRIPT INVOCATION w/O MESSAGE:')
            logging.info(str(update))
            text_for_admin = (
                f'[comm]: Empty message in Comm, user={user_id}, username={username}, '
                f'got_message={got_message}, update={update}, '
                f'bot_request_bfr_usr_msg={bot_request_bfr_usr_msg}'
            )
            logging.info(text_for_admin)
            notify_admin(text_for_admin)

    except Exception as e:
        logging.info('GENERAL COMM CRASH:')
        logging.exception(e)
        notify_admin('[comm] general script fail')

    if bot_message:
        save_bot_reply_to_user(cur, user_id, bot_message)

    cur.close()
    conn_psy.close()

    return 'finished successfully. in was a regular conversational message'
